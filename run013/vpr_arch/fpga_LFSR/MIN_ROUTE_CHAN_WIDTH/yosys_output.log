/home/everton/OpenFPGA_bitstream_generation/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/fpga_LFSR.v
Parsing Verilog input from `./benchmark/fpga_LFSR.v' to AST representation.
Generating RTLIL representation for module `\fpga_LFSR'.
./benchmark/fpga_LFSR.v:21: Warning: Identifier `\done' is implicitly declared.
Generating RTLIL representation for module `\LFSR'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \fpga_LFSR
Used module:     \LFSR
Parameter \NUM_BITS = 24

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\LFSR'.
Parameter \NUM_BITS = 24
Generating RTLIL representation for module `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000'.

2.3. Analyzing design hierarchy..
Top module:  \fpga_LFSR
Used module:     $paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000

2.4. Analyzing design hierarchy..
Top module:  \fpga_LFSR
Used module:     $paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000
Removing unused module `\LFSR'.
Removed 1 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:58$18'.
Cleaned up 1 empty switch.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./benchmark/fpga_LFSR.v:45$15 in module $paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.
Marked 1 switch rules as full_case in process $proc$./benchmark/fpga_LFSR.v:9$2 in module fpga_LFSR.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 4 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:39$24'.
  Set init value: \r_LFSR = 24'000000000000000000000000
Found init rule in `\fpga_LFSR.$proc$./benchmark/fpga_LFSR.v:6$4'.
  Set init value: \cntr = 24'000000000000000000000000

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:39$24'.
Creating decoders for process `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:58$18'.
Creating decoders for process `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:45$15'.
     1/1: $0\r_LFSR[23:0]
Creating decoders for process `\fpga_LFSR.$proc$./benchmark/fpga_LFSR.v:6$4'.
Creating decoders for process `\fpga_LFSR.$proc$./benchmark/fpga_LFSR.v:9$2'.
     1/1: $0\cntr[23:0]

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.\r_XNOR' from process `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:58$18'.

3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.\r_LFSR' using process `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:45$15'.
  created $dff cell `$procdff$33' with positive edge clock.
Creating register for signal `\fpga_LFSR.\cntr' using process `\fpga_LFSR.$proc$./benchmark/fpga_LFSR.v:9$2'.
  created $dff cell `$procdff$34' with positive edge clock.

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:39$24'.
Removing empty process `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:58$18'.
Found and cleaned up 2 empty switches in `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:45$15'.
Removing empty process `$paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.$proc$./benchmark/fpga_LFSR.v:45$15'.
Removing empty process `fpga_LFSR.$proc$./benchmark/fpga_LFSR.v:6$4'.
Found and cleaned up 1 empty switch in `\fpga_LFSR.$proc$./benchmark/fpga_LFSR.v:9$2'.
Removing empty process `fpga_LFSR.$proc$./benchmark/fpga_LFSR.v:9$2'.
Cleaned up 3 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.
<suppressed ~2 debug messages>
Optimizing module fpga_LFSR.
<suppressed ~1 debug messages>

4. Executing TECHMAP pass (map to technology primitives).

4.1. Executing Verilog-2005 frontend: /home/everton/OpenFPGA_bitstream_generation/build/yosys/bin/../share/yosys/adff2dff.v
Parsing Verilog input from `/home/everton/OpenFPGA_bitstream_generation/build/yosys/bin/../share/yosys/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

4.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

5. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\LFSR\NUM_BITS=s32'00000000000000000000000000011000.
<suppressed ~1 debug messages>

6. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.
<suppressed ~2 debug messages>

7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..
Removed 2 unused cells and 18 unused wires.
<suppressed ~5 debug messages>

8. Executing CHECK pass (checking for obvious problems).
Checking module fpga_LFSR...
Found and reported 0 problems.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpga_LFSR'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpga_LFSR..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpga_LFSR.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpga_LFSR'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing FSM pass (extract and optimize FSM).

10.1. Executing FSM_DETECT pass (finding FSMs in design).

10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..

10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpga_LFSR'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpga_LFSR..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpga_LFSR.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpga_LFSR'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell fpga_LFSR.$sub$./benchmark/fpga_LFSR.v:13$3 ($sub).
Removed top 8 bits (of 32) from port Y of cell fpga_LFSR.$sub$./benchmark/fpga_LFSR.v:13$3 ($sub).
Removed top 8 bits (of 32) from wire fpga_LFSR.$sub$./benchmark/fpga_LFSR.v:13$3_Y.

13. Executing PEEPOPT pass (run peephole optimizers).

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

15. Executing OPT pass (performing simple optimizations).

15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.

15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpga_LFSR'.
Removed a total of 0 cells.

15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpga_LFSR..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpga_LFSR.
Performed a total of 0 changes.

15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpga_LFSR'.
Removed a total of 0 cells.

15.6. Executing OPT_DFF pass (perform DFF optimizations).

15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..

15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.

15.9. Finished OPT passes. (There is nothing left to do.)

16. Executing MEMORY pass.

16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..

16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..

16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..

18. Executing OPT pass (performing simple optimizations).

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpga_LFSR'.
Removed a total of 0 cells.

18.3. Executing OPT_DFF pass (perform DFF optimizations).

18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..

18.5. Finished fast OPT passes.

19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

20. Executing OPT pass (performing simple optimizations).

20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.

20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpga_LFSR'.
Removed a total of 0 cells.

20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpga_LFSR..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpga_LFSR.
Performed a total of 0 changes.

20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpga_LFSR'.
Removed a total of 0 cells.

20.6. Executing OPT_SHARE pass.

20.7. Executing OPT_DFF pass (perform DFF optimizations).

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..

20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.

20.10. Finished OPT passes. (There is nothing left to do.)

21. Executing TECHMAP pass (map to technology primitives).

21.1. Executing Verilog-2005 frontend: /home/everton/OpenFPGA_bitstream_generation/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/everton/OpenFPGA_bitstream_generation/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=24:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=24:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=24:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=24:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=24:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=24:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $xnor.
Using template $paramod$c9511eeb847f2aa95252b1013477609463f67ee0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~356 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpga_LFSR.
<suppressed ~148 debug messages>

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpga_LFSR'.
Removed a total of 0 cells.

22.3. Executing OPT_DFF pass (perform DFF optimizations).

22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..
Removed 12 unused cells and 65 unused wires.
<suppressed ~15 debug messages>

22.5. Finished fast OPT passes.

23. Executing ABC pass (technology mapping using ABC).

23.1. Extracting gate netlist of module `\fpga_LFSR' to `<abc-temp-dir>/input.blif'..
Extracted 210 gates and 260 wires to a netlist network with 48 inputs and 48 outputs.

23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

23.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       60
ABC RESULTS:        internal signals:      164
ABC RESULTS:           input signals:       48
ABC RESULTS:          output signals:       48
Removing temp directory.

24. Executing SYNTH pass.

24.1. Executing HIERARCHY pass (managing design hierarchy).

24.1.1. Analyzing design hierarchy..
Top module:  \fpga_LFSR

24.1.2. Analyzing design hierarchy..
Top module:  \fpga_LFSR
Removed 0 unused modules.

24.2. Printing statistics.

=== fpga_LFSR ===

   Number of wires:                196
   Number of wire bits:            444
   Number of public wires:           9
   Number of public wire bits:     124
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                108
     $_DFF_P_                       48
     $lut                           60

24.3. Executing CHECK pass (checking for obvious problems).
Checking module fpga_LFSR...
Found and reported 0 problems.

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpga_LFSR..
Removed 0 unused cells and 156 unused wires.
<suppressed ~7 debug messages>

26. Executing BLIF backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: c9d06a7d7d, CPU: user 0.05s system 0.00s, MEM: 23.22 MB peak
Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)
Time spent: 56% 1x abc (0 sec), 9% 14x opt_expr (0 sec), ...
0