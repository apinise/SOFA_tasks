/home/everton/OpenFPGA_bitstream_generation/build/openfpga/openfpga -batch -f maskmul_run.openfpga
Reading script file maskmul_run.openfpga...

            ___                   _____ ____   ____    _     
           / _ \ _ __   ___ _ __ |  ___|  _ \ / ___|  / \    
          | | | | '_ \ / _ \ '_ \| |_  | |_) | |  _  / _ \   
          | |_| | |_) |  __/ | | |  _| |  __/| |_| |/ ___ \  
           \___/| .__/ \___|_| |_|_|   |_|    \____/_/   \_\ 
                |_|                                          

               OpenFPGA: An Open-source FPGA IP Generator
                     Versatile Place and Route (VPR)
                           FPGA-Verilog
                           FPGA-SPICE
                           FPGA-SDC
                           FPGA-Bitstream

             This is a free software under the MIT License

             Copyright (c) 2018 LNIS - The University of Utah

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.



Command line to execute: pcf2place --pcf /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/pcf_files/maskmul.pcf           --blif maskmul.blif           --pin_table /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/pinmap_sofa_a.csv           --fpga_io_map /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/fpga_io_location.xml           --fpga_fix_pins /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/maskmul.place           --pin_table_direction_convention explicit

Confirm selected options when call command 'pcf2place':
--pcf: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/pcf_files/maskmul.pcf
--blif: maskmul.blif
--fpga_io_map: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/fpga_io_location.xml
--pin_table: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/pinmap_sofa_a.csv
--fpga_fix_pins: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/maskmul.place
--pin_table_direction_convention: explicit
--no_time_stamp: off
--verbose: off
Read /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/pcf_files/maskmul.pcf
Read /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/pcf_files/maskmul.pcf took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
Read the design constraints from a pcf file: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/pcf_files/maskmul.pcf.
Read the blif from a file: maskmul.blif.
Read I/O Location Map
Read I/O Location Map took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
Read the I/O location map from an XML file: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/fpga_io_location.xml.
Read I/O Pin Table
Read I/O Pin Table took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
Read the I/O pin table from a csv file: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/pinmap_sofa_a.csv.
Convert PCF data to VPR I/O place data
PCF basic check passed
Convert PCF data to VPR I/O place data took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
Warning 1: Directory '/home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks' already exists. Will overwrite contents
Write I/O coordinates to a place file '/home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/maskmul.place'
Write I/O coordinates to a place file '/home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/maskmul.place' took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)

Command line to execute: vpr /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/run053/vpr_arch/maskmul/MIN_ROUTE_CHAN_WIDTH/arch/vpr_arch.xml maskmul.blif   --clock_modeling ideal   --device FPGA88   --route_chan_width 60   --absorb_buffer_luts off   --write_rr_graph rr_graph_out.xml   --skip_sync_clustering_and_routing_results on  --fix_clusters /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/maskmul.place
VPR FPGA Placement and Routing.
Version: 8.1.0-dev+9e53e9a0a
Revision: v8.0.0-7093-g9e53e9a0a
Compiled: 2023-03-09T12:34:30
Compiler: GNU 11.3.0 on Linux-5.19.0-35-generic x86_64
Build Info: release IPO VTR_ASSERT_LEVEL=2

University of Toronto
verilogtorouting.org
vtr-users@googlegroups.com
This is free open source code under MIT license.

VPR was run with the following command-line:
vpr /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/run053/vpr_arch/maskmul/MIN_ROUTE_CHAN_WIDTH/arch/vpr_arch.xml maskmul.blif --clock_modeling ideal --device FPGA88 --route_chan_width 60 --absorb_buffer_luts off --write_rr_graph rr_graph_out.xml --skip_sync_clustering_and_routing_results on --fix_clusters /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/maskmul.place


Architecture file: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/run053/vpr_arch/maskmul/MIN_ROUTE_CHAN_WIDTH/arch/vpr_arch.xml
Circuit name: maskmul

# Loading Architecture Description
Warning 2: Model 'io' input port 'outpad' has no timing specification (no clock specified to create a sequential input port, not combinationally connected to any outputs, not a clock input)
Warning 3: Model 'io' output port 'inpad' has no timing specification (no clock specified to create a sequential output port, not combinationally connected to any inputs, not a clock output)
Warning 4: Model 'frac_lut4' input port 'in' has no timing specification (no clock specified to create a sequential input port, not combinationally connected to any outputs, not a clock input)
Warning 5: Model 'frac_lut4' output port 'lut4_out' has no timing specification (no clock specified to create a sequential output port, not combinationally connected to any inputs, not a clock output)
Warning 6: Model 'frac_lut4' output port 'lut3_out' has no timing specification (no clock specified to create a sequential output port, not combinationally connected to any inputs, not a clock output)
Warning 7: Model 'frac_lut4' output port 'lut2_out' has no timing specification (no clock specified to create a sequential output port, not combinationally connected to any inputs, not a clock output)
Warning 8: Model 'carry_follower' input port 'cin' has no timing specification (no clock specified to create a sequential input port, not combinationally connected to any outputs, not a clock input)
Warning 9: Model 'carry_follower' input port 'b' has no timing specification (no clock specified to create a sequential input port, not combinationally connected to any outputs, not a clock input)
Warning 10: Model 'carry_follower' input port 'a' has no timing specification (no clock specified to create a sequential input port, not combinationally connected to any outputs, not a clock input)
Warning 11: Model 'carry_follower' output port 'cout' has no timing specification (no clock specified to create a sequential output port, not combinationally connected to any inputs, not a clock output)
# Loading Architecture Description took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)

Timing analysis: ON
Circuit netlist file: maskmul.net
Circuit placement file: maskmul.place
Circuit routing file: maskmul.route
Circuit SDC file: maskmul.sdc
Vpr floorplanning constraints file: not specified

Packer: ENABLED
Placer: ENABLED
Router: ENABLED
Analysis: ENABLED

VPR was run with the following options:

NetlistOpts.abosrb_buffer_luts            : false
NetlistOpts.sweep_dangling_primary_ios    : true
NetlistOpts.sweep_dangling_nets           : true
NetlistOpts.sweep_dangling_blocks         : true
NetlistOpts.sweep_constant_primary_outputs: false
NetlistOpts.netlist_verbosity             : 1
NetlistOpts.const_gen_inference           : COMB_SEQ

PackerOpts.allow_unrelated_clustering: auto
PackerOpts.alpha_clustering: 0.750000
PackerOpts.beta_clustering: 0.900000
PackerOpts.cluster_seed_type: BLEND2
PackerOpts.connection_driven: true
PackerOpts.global_clocks: true
PackerOpts.hill_climbing_flag: false
PackerOpts.inter_cluster_net_delay: 1.000000
PackerOpts.timing_driven: true
PackerOpts.target_external_pin_util: auto

PlacerOpts.place_freq: PLACE_ONCE
PlacerOpts.place_algorithm: CRITICALITY_TIMING_PLACE
PlacerOpts.pad_loc_type: FREE
PlacerOpts.constraints_file: Using constraints file '/home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/maskmul.place'
PlacerOpts.place_cost_exp: 1.000000
PlacerOpts.place_chan_width: 60
PlacerOpts.inner_loop_recompute_divider: 0
PlacerOpts.recompute_crit_iter: 1
PlacerOpts.timing_tradeoff: 0.500000
PlacerOpts.td_place_exp_first: 1.000000
PlacerOpts.td_place_exp_last: 8.000000
PlacerOpts.delay_offset: 0.000000
PlacerOpts.delay_ramp_delta_threshold: -1
PlacerOpts.delay_ramp_slope: 0.000000
PlacerOpts.tsu_rel_margin: 1.000000
PlacerOpts.tsu_abs_margin: 0.000000
PlacerOpts.post_place_timing_report_file: 
PlacerOpts.allowed_tiles_for_delay_model: 
PlacerOpts.delay_model_reducer: MIN
PlacerOpts.delay_model_type: DELTA
PlacerOpts.rlim_escape_fraction: 0.000000
PlacerOpts.move_stats_file: 
PlacerOpts.placement_saves_per_temperature: 0
PlacerOpts.effort_scaling: CIRCUIT
PlacerOpts.place_delta_delay_matrix_calculation_method: ASTAR_ROUTE
PlaceOpts.seed: 0
AnnealSched.type: AUTO_SCHED
AnnealSched.inner_num: 0.500000

RouterOpts.route_type: DETAILED
RouterOpts.flat_routing: false
RouterOpts.router_algorithm: TIMING_DRIVEN
RouterOpts.base_cost_type: DELAY_NORMALIZED_LENGTH
RouterOpts.fixed_channel_width: 60
RouterOpts.check_route: FULL
RouterOpts.trim_empty_chan: false
RouterOpts.trim_obs_chan: false
RouterOpts.acc_fac: 1.000000
RouterOpts.bb_factor: 3
RouterOpts.bend_cost: 0.000000
RouterOpts.first_iter_pres_fac: 0.000000
RouterOpts.initial_pres_fac: 0.500000
RouterOpts.pres_fac_mult: 1.300000
RouterOpts.max_router_iterations: 50
RouterOpts.min_incremental_reroute_fanout: 16
RouterOpts.do_check_rr_graph: true
RouterOpts.verify_binary_search: false
RouterOpts.min_channel_width_hint: 0
RouterOpts.read_rr_edge_metadata: false
RouterOpts.exit_after_first_routing_iteration: false
RouterOpts.astar_fac: 1.200000
RouterOpts.router_profiler_astar_fac: 1.200000
RouterOpts.criticality_exp: 1.000000
RouterOpts.max_criticality: 0.990000
RouterOpts.init_wirelength_abort_threshold: 0.850000
RouterOpts.save_routing_per_iteration: false
RouterOpts.congested_routing_iteration_threshold_frac: 1.000000
RouterOpts.high_fanout_threshold: 64
RouterOpts.router_debug_net: -2
RouterOpts.router_debug_sink_rr: -2
RouterOpts.router_debug_iteration: -2
RouterOpts.max_convergence_count: 1
RouterOpts.reconvergence_cpd_threshold: 0.990000
RouterOpts.update_lower_bound_delays: true
RouterOpts.first_iteration_timing_report_file: 
RouterOpts.incr_reroute_delay_ripup: AUTO
RouterOpts.route_bb_update: DYNAMIC
RouterOpts.lookahead_type: MAP
RouterOpts.initial_timing: LOOKAHEAD
RouterOpts.router_heap: BINARY_HEAP
RouterOpts.routing_failure_predictor = SAFE
RouterOpts.routing_budgets_algorithm = DISABLE

AnalysisOpts.gen_post_synthesis_netlist: false
AnalysisOpts.timing_report_npaths: 100
AnalysisOpts.timing_report_skew: false
AnalysisOpts.echo_dot_timing_graph_node: -1
AnalysisOpts.timing_report_detail: NETLIST
AnalysisOpts.post_synth_netlist_unconn_input_handling: UNCONNECTED
AnalysisOpts.post_synth_netlist_unconn_output_handling: UNCONNECTED

# Building complex block graph
Warning 12: [LINE 607] false logically-equivalent pin clb[0].I0[1].
Warning 13: [LINE 611] false logically-equivalent pin clb[0].I1[1].
Warning 14: [LINE 615] false logically-equivalent pin clb[0].I2[1].
Warning 15: [LINE 619] false logically-equivalent pin clb[0].I3[1].
Warning 16: [LINE 623] false logically-equivalent pin clb[0].I4[1].
Warning 17: [LINE 627] false logically-equivalent pin clb[0].I5[1].
Warning 18: [LINE 631] false logically-equivalent pin clb[0].I6[1].
Warning 19: [LINE 635] false logically-equivalent pin clb[0].I7[1].
# Building complex block graph took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
Circuit file: maskmul.blif
# Load circuit
# Load circuit took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
# Clean circuit
Inferred    0 additional primitive pins as constant generators since they have no combinationally connected inputs
Inferred    0 additional primitive pins as constant generators due to constant inputs
Swept input(s)      : 0
Swept output(s)     : 0 (0 dangling, 0 constant)
Swept net(s)        : 0
Swept block(s)      : 0
Constant Pins Marked: 0
# Clean circuit took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
# Compress circuit
# Compress circuit took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
# Verify circuit
# Verify circuit took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
Circuit Statistics:
  Blocks: 24
    .input :      12
    .latch :       2
    .output:       2
    4-LUT  :       8
  Nets  : 22
    Avg Fanout:     1.5
    Max Fanout:     2.0
    Min Fanout:     1.0
  Netlist Clocks: 1
# Build Timing Graph
  Timing Graph Nodes: 55
  Timing Graph Edges: 64
  Timing Graph Levels: 8
# Build Timing Graph took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
Netlist contains 1 clocks
  Netlist Clock 'clock' Fanout: 2 pins (3.6%), 2 blocks (8.3%)
# Load Timing Constraints

SDC file 'maskmul.sdc' not found
Setting default timing constraints:
   * constrain all primay inputs and primary outputs on netlist clock 'clock'
   * optimize netlist clock to run as fast as possible
Timing constraints created 1 clocks
  Constrained Clock 'clock' Source: 'clock.inpad[0]'

# Load Timing Constraints took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
# Packing
Warning 20: Ambiguous block type specification at grid location (0,0). Existing block type 'io_bottom' at (0,0) has the same priority (100) as new overlapping type 'io_left'. The last specification will apply.
Warning 21: Ambiguous block type specification at grid location (0,9). Existing block type 'io_top' at (0,9) has the same priority (100) as new overlapping type 'io_left'. The last specification will apply.
Warning 22: Ambiguous block type specification at grid location (9,0). Existing block type 'io_bottom' at (9,0) has the same priority (100) as new overlapping type 'io_right'. The last specification will apply.
Warning 23: Ambiguous block type specification at grid location (9,9). Existing block type 'io_top' at (9,9) has the same priority (100) as new overlapping type 'io_right'. The last specification will apply.
Begin packing 'maskmul.blif'.

After removing unused inputs...
	total blocks: 24, total nets: 22, total inputs: 12, total outputs: 2
Begin prepacking.
0 attraction groups were created during prepacking.
Finish prepacking.
Using inter-cluster delay: 2.344e-08
Packing with pin utilization targets: io_top:1,1 io_right:1,1 io_bottom:1,1 io_left:1,1 clb:0.8,1
Packing with high fanout thresholds: io_top:128 io_right:128 io_bottom:128 io_left:128 clb:32
Starting Clustering - Clustering Progress: 
-------------------   --------------------------   ---------
Molecules processed   Number of clusters created   FPGA size
-------------------   --------------------------   ---------
Warning 24: Ambiguous block type specification at grid location (0,0). Existing block type 'io_bottom' at (0,0) has the same priority (100) as new overlapping type 'io_left'. The last specification will apply.
Warning 25: Ambiguous block type specification at grid location (0,9). Existing block type 'io_top' at (0,9) has the same priority (100) as new overlapping type 'io_left'. The last specification will apply.
Warning 26: Ambiguous block type specification at grid location (9,0). Existing block type 'io_bottom' at (9,0) has the same priority (100) as new overlapping type 'io_right'. The last specification will apply.
Warning 27: Ambiguous block type specification at grid location (9,9). Existing block type 'io_top' at (9,9) has the same priority (100) as new overlapping type 'io_right'. The last specification will apply.

Logic Element (fle) detailed count:
  Total number of Logic Elements used : 8
  LEs used for logic and registers    : 2
  LEs used for logic only             : 6
  LEs used for registers only         : 0

Incr Slack updates 1 in 1.18e-06 sec
Full Max Req/Worst Slack updates 1 in 1.14e-06 sec
Incr Max Req/Worst Slack updates 0 in 0 sec
Incr Criticality updates 0 in 0 sec
Full Criticality updates 1 in 1.16e-06 sec
Warning 28: Ambiguous block type specification at grid location (0,0). Existing block type 'io_bottom' at (0,0) has the same priority (100) as new overlapping type 'io_left'. The last specification will apply.
Warning 29: Ambiguous block type specification at grid location (0,9). Existing block type 'io_top' at (0,9) has the same priority (100) as new overlapping type 'io_left'. The last specification will apply.
Warning 30: Ambiguous block type specification at grid location (9,0). Existing block type 'io_bottom' at (9,0) has the same priority (100) as new overlapping type 'io_right'. The last specification will apply.
Warning 31: Ambiguous block type specification at grid location (9,9). Existing block type 'io_top' at (9,9) has the same priority (100) as new overlapping type 'io_right'. The last specification will apply.
FPGA sized to 10 x 10 (FPGA88)
Device Utilization: 0.05 (target 1.00)
	Block Utilization: 0.11 Type: io
	Block Utilization: 0.02 Type: clb

Start the iterative improvement process
the iterative improvement process is done
Final Clustering Statistics: 
----------   --------   ------------------------------------   --------------------------
Block Type   # Blocks   Avg. # of input clocks and pins used   Avg. # of output pins used
----------   --------   ------------------------------------   --------------------------
     EMPTY          0                                      0                            0   
        io         14                               0.142857                     0.857143   
       clb          1                                     28                            8   
Absorbed logical nets 2 out of 22 nets, 20 nets not absorbed.

Netlist conversion complete.

# Packing took 0.00 seconds (max_rss 23.2 MiB, delta_rss +0.0 MiB)
# Load packing
Begin loading packed FPGA netlist file.
Netlist generated from file 'maskmul.net'.
Detected 0 constant generators (to see names run with higher pack verbosity)
Finished loading packed FPGA netlist file (took 0.005915 seconds).
Warning 32: Treated 0 constant nets as global which will not be routed (to see net names increase packer verbosity).
# Load packing took 0.01 seconds (max_rss 49.6 MiB, delta_rss +26.4 MiB)
Warning 33: Netlist contains 0 global net to non-global architecture pin connections
Cluster level netlist and block usage statistics
Netlist num_nets: 20
Netlist num_blocks: 15
Netlist EMPTY blocks: 0.
Netlist io blocks: 14.
Netlist clb blocks: 1.
Netlist inputs pins: 12
Netlist output pins: 2

Pb types usage...
  io             : 14
   inpad         : 12
   outpad        : 2
  clb            : 1
   fle           : 8
    lut3inter    : 3
     ble3        : 3
      lut3       : 3
       lut       : 3
      ff         : 1
    ble4         : 5
     lut4        : 5
      lut        : 5
     ff          : 1

# Create Device
## Build Device Grid
Warning 34: Ambiguous block type specification at grid location (0,0). Existing block type 'io_bottom' at (0,0) has the same priority (100) as new overlapping type 'io_left'. The last specification will apply.
Warning 35: Ambiguous block type specification at grid location (0,9). Existing block type 'io_top' at (0,9) has the same priority (100) as new overlapping type 'io_left'. The last specification will apply.
Warning 36: Ambiguous block type specification at grid location (9,0). Existing block type 'io_bottom' at (9,0) has the same priority (100) as new overlapping type 'io_right'. The last specification will apply.
Warning 37: Ambiguous block type specification at grid location (9,9). Existing block type 'io_top' at (9,9) has the same priority (100) as new overlapping type 'io_right'. The last specification will apply.
FPGA sized to 10 x 10: 100 grid tiles (FPGA88)

Resource usage...
	Netlist
		14	blocks of type: io
	Architecture
		32	blocks of type: io_top
		32	blocks of type: io_right
		32	blocks of type: io_bottom
		32	blocks of type: io_left
	Netlist
		1	blocks of type: clb
	Architecture
		64	blocks of type: clb

Device Utilization: 0.05 (target 1.00)
	Physical Tile io_top:
	Block Utilization: 0.44 Logical Block: io
	Physical Tile io_right:
	Block Utilization: 0.44 Logical Block: io
	Physical Tile io_bottom:
	Block Utilization: 0.44 Logical Block: io
	Physical Tile io_left:
	Block Utilization: 0.44 Logical Block: io
	Physical Tile clb:
	Block Utilization: 0.02 Logical Block: clb

## Build Device Grid took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Warning 38: Tileable routing resource graph does not support clock modeling yet! Related options are ignored...
## Build tileable routing resource graph
X-direction routing channel width is 60
Y-direction routing channel width is 60
Warning 39: Sized nonsensical R=0 transistor to minimum width
Warning 40: Sized nonsensical R=0 transistor to minimum width
Warning 41: Sized nonsensical R=0 transistor to minimum width
Warning 42: Sized nonsensical R=0 transistor to minimum width
Warning 43: Node: 7440 with RR_type: CHANX  at Location:CHANX:7440 L4 length:1 (1,1)->(1,1), had no out-going switches
Warning 44: Node: 7654 with RR_type: CHANX  at Location:CHANX:7654 L4 length:1 (1,2)->(1,2), had no out-going switches
Warning 45: Node: 7868 with RR_type: CHANX  at Location:CHANX:7868 L4 length:1 (1,3)->(1,3), had no out-going switches
Warning 46: Node: 8082 with RR_type: CHANX  at Location:CHANX:8082 L4 length:1 (1,4)->(1,4), had no out-going switches
Warning 47: Node: 8296 with RR_type: CHANX  at Location:CHANX:8296 L4 length:1 (1,5)->(1,5), had no out-going switches
Warning 48: Node: 8510 with RR_type: CHANX  at Location:CHANX:8510 L4 length:1 (1,6)->(1,6), had no out-going switches
Warning 49: Node: 8724 with RR_type: CHANX  at Location:CHANX:8724 L4 length:1 (1,7)->(1,7), had no out-going switches
Warning 50: in check_rr_graph: fringe node 7440 CHANX at (1,1) has no fanin.
	 This is possible on a fringe node based on low Fc_out, N, and certain lengths.
## Build tileable routing resource graph took 0.02 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
  RR Graph Nodes: 11020
  RR Graph Edges: 55564
# Create Device took 0.04 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

# Computing router lookahead map
## Computing wire lookahead
## Computing wire lookahead took 0.13 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
## Computing src/opin lookahead
## Computing src/opin lookahead took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Computing router lookahead map took 0.13 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Computing placement delta delay look-up
RR graph channel widths unchanged, skipping RR graph rebuild
## Computing delta delays
## Computing delta delays took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Computing placement delta delay look-up took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Using simple RL 'Softmax agent' for choosing move types
# Placement
## Initial Placement
Reading /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/maskmul.place.

Successfully read constraints file /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/maskmul.place.

Initial placement iteration 0 has finished successfully
## Initial Placement took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

There are 29 point to point connections in this circuit.


BB estimate of min-dist (placement) wire length: 51

Completed placement consistency check successfully.
Initial placement cost: 1 bb_cost: 0.85 td_cost: 8.07387e-08
Initial placement estimated Critical Path Delay (CPD): 16.24 ns
Initial placement estimated setup Total Negative Slack (sTNS): -37.44 ns
Initial placement estimated setup Worst Negative Slack (sWNS): -16.24 ns

Initial placement estimated setup slack histogram:
[ -1.6e-08: -1.5e-08) 1 ( 25.0%) |*************************
[ -1.5e-08: -1.4e-08) 0 (  0.0%) |
[ -1.4e-08: -1.3e-08) 0 (  0.0%) |
[ -1.3e-08: -1.1e-08) 1 ( 25.0%) |*************************
[ -1.1e-08:   -1e-08) 0 (  0.0%) |
[   -1e-08: -9.1e-09) 0 (  0.0%) |
[ -9.1e-09: -7.9e-09) 0 (  0.0%) |
[ -7.9e-09: -6.7e-09) 0 (  0.0%) |
[ -6.7e-09: -5.5e-09) 0 (  0.0%) |
[ -5.5e-09: -4.3e-09) 2 ( 50.0%) |*************************************************
Placement contains 0 placement macros involving 0 blocks (average macro size -nan)

Moves per temperature: 18
Warning 51: Starting t: 0 of 15 configurations accepted.

---- ------ ------- ------- ---------- ---------- ------- ---------- -------- ------- ------- ------ -------- --------- ------
Tnum   Time       T Av Cost Av BB Cost Av TD Cost     CPD       sTNS     sWNS Ac Rate Std Dev  R lim Crit Exp Tot Moves  Alpha
      (sec)                                          (ns)       (ns)     (ns)                                                 
---- ------ ------- ------- ---------- ---------- ------- ---------- -------- ------- ------- ------ -------- --------- ------
   1    0.0 0.0e+00   0.926       0.80 7.3586e-08  16.240      -37.4  -16.240   0.056  0.0000    9.0     1.00        18  0.200
   2    0.0 0.0e+00   1.000       0.80 7.3096e-08  16.240      -40.3  -16.240   0.000  0.0000    9.0     1.00        36  0.950
## Placement Quench took 0.00 seconds (max_rss 49.8 MiB)
post-quench CPD = 16.24 (ns) 

BB estimate of min-dist (placement) wire length: 48

Completed placement consistency check successfully.

Swaps called: 51

Aborted Move Reasons:
  No moves aborted

Placement estimated critical path delay (least slack): 16.24 ns, Fmax: 61.5764 MHz
Placement estimated setup Worst Negative Slack (sWNS): -16.24 ns
Placement estimated setup Total Negative Slack (sTNS): -40.32 ns

Placement estimated setup slack histogram:
[ -1.6e-08: -1.5e-08) 1 ( 25.0%) |*************************
[ -1.5e-08: -1.4e-08) 0 (  0.0%) |
[ -1.4e-08: -1.3e-08) 0 (  0.0%) |
[ -1.3e-08: -1.2e-08) 1 ( 25.0%) |*************************
[ -1.2e-08: -1.1e-08) 0 (  0.0%) |
[ -1.1e-08:   -1e-08) 0 (  0.0%) |
[   -1e-08: -8.9e-09) 0 (  0.0%) |
[ -8.9e-09: -7.9e-09) 0 (  0.0%) |
[ -7.9e-09: -6.8e-09) 0 (  0.0%) |
[ -6.8e-09: -5.8e-09) 2 ( 50.0%) |*************************************************

Placement estimated geomean non-virtual intra-domain period: 16.24 ns (61.5764 MHz)
Placement estimated fanout-weighted geomean non-virtual intra-domain period: 16.24 ns (61.5764 MHz)

Placement cost: 1, bb_cost: 0.8, td_cost: 7.30963e-08, 

Placement resource usage:
  io  implemented as io_right: 14
  clb implemented as clb     : 1

Placement number of temperatures: 2
Placement total # of swap attempts: 51
	Swaps accepted:  1 ( 2.0 %)
	Swaps rejected: 47 (92.2 %)
	Swaps aborted :  3 ( 5.9 %)


Percentage of different move types:
	Uniform move: 21.57 % (acc=0.00 %, rej=100.00 %, aborted=0.00 %)
	Median move: 9.80 % (acc=0.00 %, rej=100.00 %, aborted=0.00 %)
	W. Centroid move: 39.22 % (acc=5.00 %, rej=95.00 %, aborted=0.00 %)
	Centroid move: 7.84 % (acc=0.00 %, rej=100.00 %, aborted=0.00 %)
	W. Median move: 11.76 % (acc=0.00 %, rej=100.00 %, aborted=0.00 %)
	Crit. Uniform move: 3.92 % (acc=0.00 %, rej=50.00 %, aborted=50.00 %)
	Feasible Region move: 5.88 % (acc=0.00 %, rej=33.33 %, aborted=66.67 %)

Placement Quench timing analysis took 7.321e-06 seconds (4.88e-06 STA, 2.441e-06 slack) (1 full updates: 1 setup, 0 hold, 0 combined).
Placement Total  timing analysis took 0.000109127 seconds (9.7345e-05 STA, 1.1782e-05 slack) (4 full updates: 4 setup, 0 hold, 0 combined).
update_td_costs: connections 0 nets 0 sum_nets 0 total 0
# Placement took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Incr Slack updates 4 in 3.59e-06 sec
Full Max Req/Worst Slack updates 1 in 1.3e-06 sec
Incr Max Req/Worst Slack updates 3 in 1.431e-06 sec
Incr Criticality updates 3 in 2.571e-06 sec
Full Criticality updates 1 in 1.31e-06 sec

# Routing
RR graph channel widths unchanged, skipping RR graph rebuild
Confirming router algorithm: TIMING_DRIVEN.
## Initializing router criticalities
Initial Net Connection Criticality Histogram:
[        0:      0.1) 1 (  3.3%) |*****
[      0.1:      0.2) 0 (  0.0%) |
[      0.2:      0.3) 2 (  6.7%) |**********
[      0.3:      0.4) 3 ( 10.0%) |***************
[      0.4:      0.5) 0 (  0.0%) |
[      0.5:      0.6) 0 (  0.0%) |
[      0.6:      0.7) 5 ( 16.7%) |*************************
[      0.7:      0.8) 10 ( 33.3%) |*************************************************
[      0.8:      0.9) 0 (  0.0%) |
[      0.9:        1) 9 ( 30.0%) |********************************************
## Initializing router criticalities took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
---- ------ ------- ---- ------- ------- ------- ----------------- --------------- -------- ---------- ---------- ---------- ---------- --------
Iter   Time    pres  BBs    Heap  Re-Rtd  Re-Rtd Overused RR Nodes      Wirelength      CPD       sTNS       sWNS       hTNS       hWNS Est Succ
      (sec)     fac Updt    push    Nets   Conns                                       (ns)       (ns)       (ns)       (ns)       (ns)     Iter
---- ------ ------- ---- ------- ------- ------- ----------------- --------------- -------- ---------- ---------- ---------- ---------- --------
   1    0.0     0.0    0    3297      19      29      11 ( 0.100%)     114 ( 1.3%)   24.880     -53.28    -24.880      0.000      0.000      N/A
   2    0.0     0.5    0    2688      16      24      11 ( 0.100%)     114 ( 1.3%)   24.880     -53.28    -24.880      0.000      0.000      N/A
   3    0.0     0.6    0    3531      16      24      10 ( 0.091%)     120 ( 1.4%)   24.880     -59.04    -24.880      0.000      0.000      N/A
   4    0.0     0.8    0    2894      14      22       8 ( 0.073%)     135 ( 1.6%)   24.880     -59.04    -24.880      0.000      0.000      N/A
   5    0.0     1.1    0    2976      12      20       6 ( 0.054%)     134 ( 1.6%)   24.880     -60.48    -24.880      0.000      0.000      N/A
   6    0.0     1.4    0    2420       8      15       4 ( 0.036%)     144 ( 1.7%)   24.880     -61.92    -24.880      0.000      0.000      N/A
   7    0.0     1.9    0    2385       6      11       1 ( 0.009%)     153 ( 1.8%)   24.880     -61.92    -24.880      0.000      0.000      N/A
   8    0.0     2.4    0     558       2       4       1 ( 0.009%)     153 ( 1.8%)   24.880     -61.92    -24.880      0.000      0.000      N/A
   9    0.0     3.1    0     297       1       2       1 ( 0.009%)     161 ( 1.9%)   24.880     -61.92    -24.880      0.000      0.000      N/A
  10    0.0     4.1    0    1525       3       6       1 ( 0.009%)     154 ( 1.8%)   24.880     -61.92    -24.880      0.000      0.000        8
  11    0.0     5.3    0    1318       2       4       1 ( 0.009%)     167 ( 1.9%)   24.880     -61.92    -24.880      0.000      0.000        9
  12    0.0     6.9    0    1058       2       4       0 ( 0.000%)     158 ( 1.8%)   24.880     -61.92    -24.880      0.000      0.000       10
Restoring best routing
Critical path: 24.88 ns
Successfully routed after 12 routing iterations.
Final Net Connection Criticality Histogram:
[        0:      0.1) 1 (  3.3%) |*******
[      0.1:      0.2) 0 (  0.0%) |
[      0.2:      0.3) 1 (  3.3%) |*******
[      0.3:      0.4) 2 (  6.7%) |**************
[      0.4:      0.5) 5 ( 16.7%) |***********************************
[      0.5:      0.6) 2 (  6.7%) |**************
[      0.6:      0.7) 7 ( 23.3%) |*************************************************
[      0.7:      0.8) 5 ( 16.7%) |***********************************
[      0.8:      0.9) 2 (  6.7%) |**************
[      0.9:        1) 5 ( 16.7%) |***********************************
Router Stats: total_nets_routed: 101 total_connections_routed: 165 total_heap_pushes: 24947 total_heap_pops: 9096
# Routing took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Checking to ensure routing is legal...
# Checking to ensure non-configurable edges are legal
# Checking to ensure non-configurable edges are legal took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Completed routing consistency check successfully.

Serial number (magic cookie) for the routing is: -687658
Circuit successfully routed with a channel width factor of 60.
Incr Slack updates 13 in 1.273e-05 sec
Full Max Req/Worst Slack updates 1 in 8.3e-07 sec
Incr Max Req/Worst Slack updates 12 in 5.17e-06 sec
Incr Criticality updates 11 in 9.33e-06 sec
Full Criticality updates 2 in 2.25e-06 sec
Warning 52: Sychronization between packing and routing results is not applied due to users select to skip it


Average number of bends per net: 2.52632  Maximum # of bends: 5

Number of global nets: 1
Number of routed nets (nonglobal): 19
Wire length results (in units of 1 clb segments)...
	Total wirelength: 158, average net length: 8.31579
	Maximum net length: 16

Wire length results in terms of physical segments...
	Total wiring segments used: 74, average wire segments per net: 3.89474
	Maximum segments used by a net: 7
	Total local nets with reserved CLB opins: 0

Routing channel utilization histogram:
[        1:      inf)   0 (  0.0%) |
[      0.9:        1)   0 (  0.0%) |
[      0.8:      0.9)   0 (  0.0%) |
[      0.7:      0.8)   0 (  0.0%) |
[      0.5:      0.6)   0 (  0.0%) |
[      0.4:      0.5)   0 (  0.0%) |
[      0.3:      0.4)   0 (  0.0%) |
[      0.2:      0.3)   2 (  1.2%) |*
[      0.1:      0.2)   0 (  0.0%) |
[        0:      0.1) 160 ( 98.8%) |***********************************************
Maximum routing channel utilization:      0.27 at (8,3)

X - Directed channels:   j max occ ave occ capacity
                      ---- ------- ------- --------
                         0       4   0.700       60
                         1       6   1.100       60
                         2       3   0.600       60
                         3      16   2.200       60
                         4       0   0.000       60
                         5       2   0.200       60
                         6       0   0.000       60
                         7       0   0.000       60
                         8       0   0.000       60
Y - Directed channels:   i max occ ave occ capacity
                      ---- ------- ------- --------
                         0       0   0.000       60
                         1       0   0.000       60
                         2       0   0.000       60
                         3       0   0.000       60
                         4       0   0.000       60
                         5       2   0.500       60
                         6       3   0.600       60
                         7       9   2.900       60
                         8      23   7.000       60

Total tracks in x-direction: 540, in y-direction: 540

Logic area (in minimum width transistor areas, excludes I/Os and empty grid tiles)...
	Total logic block area (Warning, need to add pitch of routing to blocks with height > 3): 3.44922e+06
	Total used logic block area: 53894

Routing area (in minimum width transistor areas)...
	Total routing area: 373865., per logic tile: 3738.65

Total Number of Wiring Segments by Direction: direction length number
                                              --------- ------ -------
                                                      X      1    432
                                                      Y      1    432
                                                      X      2    306
                                                      Y      2    306
                                                      X      4   1188
                                                      Y      4   1188

X - Directed Wiring Segment usage by length: length utilization
                                             ------ -----------
                                            1      0.0208
                                            2      0.0163
                                            4      0.0143

Y - Directed Wiring Segment usage by length: length utilization
                                             ------ -----------
                                            1      0.0231
                                            2      0.0294
                                            4      0.0202

Segment usage by type (index): name type utilization
                               ---- ---- -----------
                                 L1    0       0.044
                                 L2    1      0.0458
                                 L4    2      0.0345

Final hold Worst Negative Slack (hWNS): 0 ns
Final hold Total Negative Slack (hTNS): 0 ns

Final hold slack histogram:
[  3.6e-09:  4.2e-09) 1 ( 25.0%) |*************************
[  4.2e-09:  4.7e-09) 0 (  0.0%) |
[  4.7e-09:  5.3e-09) 0 (  0.0%) |
[  5.3e-09:  5.8e-09) 0 (  0.0%) |
[  5.8e-09:  6.3e-09) 0 (  0.0%) |
[  6.3e-09:  6.9e-09) 0 (  0.0%) |
[  6.9e-09:  7.4e-09) 0 (  0.0%) |
[  7.4e-09:  7.9e-09) 2 ( 50.0%) |*************************************************
[  7.9e-09:  8.5e-09) 0 (  0.0%) |
[  8.5e-09:    9e-09) 1 ( 25.0%) |*************************

Final critical path delay (least slack): 24.88 ns, Fmax: 40.1929 MHz
Final setup Worst Negative Slack (sWNS): -24.88 ns
Final setup Total Negative Slack (sTNS): -61.92 ns

Final setup slack histogram:
[ -2.5e-08: -2.3e-08) 1 ( 25.0%) |*************************
[ -2.3e-08: -2.2e-08) 0 (  0.0%) |
[ -2.2e-08:   -2e-08) 0 (  0.0%) |
[   -2e-08: -1.8e-08) 0 (  0.0%) |
[ -1.8e-08: -1.7e-08) 1 ( 25.0%) |*************************
[ -1.7e-08: -1.5e-08) 0 (  0.0%) |
[ -1.5e-08: -1.4e-08) 0 (  0.0%) |
[ -1.4e-08: -1.2e-08) 0 (  0.0%) |
[ -1.2e-08:   -1e-08) 0 (  0.0%) |
[   -1e-08: -8.7e-09) 2 ( 50.0%) |*************************************************

Final geomean non-virtual intra-domain period: 24.88 ns (40.1929 MHz)
Final fanout-weighted geomean non-virtual intra-domain period: 24.88 ns (40.1929 MHz)

Incr Slack updates 1 in 1.23e-06 sec
Full Max Req/Worst Slack updates 1 in 7e-07 sec
Incr Max Req/Worst Slack updates 0 in 0 sec
Incr Criticality updates 0 in 0 sec
Full Criticality updates 1 in 1.23e-06 sec
Flow timing analysis took 0.00041173 seconds (0.000350498 STA, 6.1232e-05 slack) (19 full updates: 5 setup, 0 hold, 14 combined).
VPR suceeded
The entire flow of VPR took 0.20 seconds (max_rss 49.8 MiB)

Command line to execute: read_openfpga_arch -f /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/run053/vpr_arch/maskmul/MIN_ROUTE_CHAN_WIDTH/arch/openfpga_arch.xml

Confirm selected options when call command 'read_openfpga_arch':
--file, -f: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/run053/vpr_arch/maskmul/MIN_ROUTE_CHAN_WIDTH/arch/openfpga_arch.xml
Reading XML architecture '/home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/run053/vpr_arch/maskmul/MIN_ROUTE_CHAN_WIDTH/arch/openfpga_arch.xml'...
Read OpenFPGA architecture
Warning 53: Automatically set circuit model 'frac_lut4' to be default in its type.
Warning 54: Automatically set circuit model 'SDFFRQ' to be default in its type.
Warning 55: Automatically set circuit model 'sky130_fd_sc_hd__mux2_1_wrapper' to be default in its type.
Warning 56: Automatically set circuit model 'DFFRQ' to be default in its type.
Use the default configurable memory model 'DFFRQ' for circuit model 'mux_tree' port 'sram')
Use the default configurable memory model 'DFFRQ' for circuit model 'mux_tree_tapbuf' port 'sram')
Use the default configurable memory model 'DFFRQ' for circuit model 'frac_lut4' port 'sram')
Read OpenFPGA architecture took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Check circuit library
Checking circuit library passed.
Check circuit library took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Found 0 errors when checking configurable memory circuit models!
Found 0 errors when checking tile annotation!

Command line to execute: read_openfpga_simulation_setting -f /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/openfpga_simulation_settings/auto_sim_openfpga.xml

Confirm selected options when call command 'read_openfpga_simulation_setting':
--file, -f: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/openfpga_simulation_settings/auto_sim_openfpga.xml
Reading XML simulation setting '/home/everton/OpenFPGA_bitstream_generation/openfpga_flow/openfpga_simulation_settings/auto_sim_openfpga.xml'...
Read OpenFPGA simulation settings
Read OpenFPGA simulation settings took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: link_openfpga_arch --activity_file maskmul_ace_out.act --sort_gsb_chan_node_in_edges --verbose

Confirm selected options when call command 'link_openfpga_arch':
--activity_file: maskmul_ace_out.act
--sort_gsb_chan_node_in_edges: on
--verbose: on
Link OpenFPGA architecture to VPR architecture
# Build fast look-up for physical tile pins
# Build fast look-up for physical tile pins took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Building annotation for physical modes in pb_type...
Annotate pb_type 'io' with physical mode 'physical'
Annotate pb_type 'fle' with physical mode 'physical'
Implicitly infer physical mode 'default' for pb_type 'clb'
Implicitly infer physical mode 'default' for pb_type 'fabric'
Implicitly infer physical mode 'default' for pb_type 'frac_logic'
Done
Check physical mode annotation for pb_types passed.

Building annotation about physical types for pb_type interconnection...
Infer physical type 'direct' of interconnect 'inpad' (was 'direct')
Infer physical type 'direct' of interconnect 'inpad' (was 'direct')
Infer physical type 'direct' of interconnect 'outpad' (was 'direct')
Infer physical type 'direct' of interconnect 'clbouts1' (was 'direct')
Infer physical type 'direct' of interconnect 'clbouts2' (was 'direct')
Infer physical type 'direct' of interconnect 'shift_register_out' (was 'direct')
Infer physical type 'direct' of interconnect 'scan_chain_out' (was 'direct')
Infer physical type 'direct' of interconnect 'carry_chain_out' (was 'direct')
Infer physical type 'direct' of interconnect 'clks' (was 'complete')
Infer physical type 'direct' of interconnect 'resets' (was 'complete')
Infer physical type 'direct' of interconnect 'direct_fle0' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle0i' (was 'direct')
Infer physical type 'direct' of interconnect 'shift_register_in' (was 'direct')
Infer physical type 'direct' of interconnect 'scan_chain_in' (was 'direct')
Infer physical type 'direct' of interconnect 'carry_chain_in' (was 'direct')
Infer physical type 'direct' of interconnect 'direct2' (was 'direct')
Infer physical type 'direct' of interconnect 'direct3' (was 'direct')
Infer physical type 'direct' of interconnect 'direct2' (was 'direct')
Infer physical type 'direct' of interconnect 'direct2' (was 'direct')
Infer physical type 'direct' of interconnect 'direct5' (was 'direct')
Infer physical type 'direct' of interconnect 'direct6' (was 'direct')
Infer physical type 'direct' of interconnect 'direct7' (was 'direct')
Infer physical type 'direct' of interconnect 'direct8' (was 'direct')
Infer physical type 'direct' of interconnect 'direct1' (was 'direct')
Infer physical type 'direct' of interconnect 'direct2' (was 'direct')
Infer physical type 'direct' of interconnect 'direct3' (was 'direct')
Infer physical type 'direct' of interconnect 'direct4' (was 'direct')
Infer physical type 'direct' of interconnect 'direct9' (was 'direct')
Infer physical type 'direct' of interconnect 'direct10' (was 'direct')
Infer physical type 'direct' of interconnect 'direct5' (was 'direct')
Infer physical type 'direct' of interconnect 'direct6' (was 'direct')
Infer physical type 'direct' of interconnect 'direct7' (was 'direct')
Infer physical type 'mux' of interconnect 'mux3' (was 'mux')
Infer physical type 'mux' of interconnect 'mux4' (was 'mux')
Infer physical type 'direct' of interconnect 'direct1' (was 'direct')
Infer physical type 'direct' of interconnect 'direct2' (was 'direct')
Infer physical type 'direct' of interconnect 'direct6' (was 'direct')
Infer physical type 'direct' of interconnect 'direct7' (was 'direct')
Infer physical type 'mux' of interconnect 'mux1' (was 'mux')
Infer physical type 'direct' of interconnect 'direct1' (was 'direct')
Infer physical type 'direct' of interconnect 'direct2' (was 'direct')
Infer physical type 'mux' of interconnect 'mux2' (was 'mux')
Infer physical type 'direct' of interconnect 'direct3' (was 'direct')
Infer physical type 'direct' of interconnect 'direct4' (was 'direct')
Infer physical type 'direct' of interconnect 'direct5' (was 'direct')
Infer physical type 'direct' of interconnect 'complete1' (was 'complete')
Infer physical type 'direct' of interconnect 'complete2' (was 'complete')
Infer physical type 'direct' of interconnect 'direct3' (was 'direct')
Infer physical type 'mux' of interconnect 'mux1' (was 'mux')
Infer physical type 'direct' of interconnect 'direct4' (was 'direct')
Infer physical type 'mux' of interconnect 'mux2' (was 'mux')
Infer physical type 'direct' of interconnect 'direct_fle1' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle1i' (was 'direct')
Infer physical type 'direct' of interconnect 'shift_register_link' (was 'direct')
Infer physical type 'direct' of interconnect 'scan_chain_link' (was 'direct')
Infer physical type 'direct' of interconnect 'carry_chain_link' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle2' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle2i' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle3' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle3i' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle4' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle4i' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle5' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle5i' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle6' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle6i' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle7' (was 'direct')
Infer physical type 'direct' of interconnect 'direct_fle7i' (was 'direct')
Done

Building annotation between operating and physical pb_types...
Annotate operating pb_type 'inpad' to its physical pb_type 'iopad'
Annotate operating pb_type 'outpad' to its physical pb_type 'iopad'
Annotate operating pb_type 'lut3' to its physical pb_type 'frac_lut4'
Annotate operating pb_type 'ff' to its physical pb_type 'ff'
Annotate operating pb_type 'lut4' to its physical pb_type 'frac_lut4'
Annotate operating pb_type 'ff' to its physical pb_type 'ff'
Annotate operating pb_type 'ff' to its physical pb_type 'ff'
Implicitly infer the physical pb_type for pb_type 'iopad' itself
Implicitly infer the physical pb_type for pb_type 'frac_lut4' itself
Implicitly infer the physical pb_type for pb_type 'carry_follower' itself
Implicitly infer the physical pb_type for pb_type 'ff' itself
Done
Check physical pb_type annotation for pb_types passed.

Building annotation between physical pb_types and circuit models...
Bind pb type 'iopad' port 'outpad' to circuit model 'io' port 'outpad'
Bind pb type 'iopad' port 'inpad' to circuit model 'io' port 'inpad'
Bind physical pb_type 'iopad' to its circuit model 'io'
Bind pb type 'frac_lut4' port 'in' to circuit model 'frac_lut4' port 'in'
Bind pb type 'frac_lut4' port 'lut2_out' to circuit model 'frac_lut4' port 'lut2_out'
Bind pb type 'frac_lut4' port 'lut3_out' to circuit model 'frac_lut4' port 'lut3_out'
Bind pb type 'frac_lut4' port 'lut4_out' to circuit model 'frac_lut4' port 'lut4_out'
Bind physical pb_type 'frac_lut4' to its circuit model 'frac_lut4'
Bind pb type 'carry_follower' port 'a' to circuit model 'sky130_fd_sc_hd__mux2_1_wrapper' port 'a'
Bind pb type 'carry_follower' port 'b' to circuit model 'sky130_fd_sc_hd__mux2_1_wrapper' port 'b'
Bind pb type 'carry_follower' port 'cin' to circuit model 'sky130_fd_sc_hd__mux2_1_wrapper' port 'cin'
Bind pb type 'carry_follower' port 'cout' to circuit model 'sky130_fd_sc_hd__mux2_1_wrapper' port 'cout'
Bind physical pb_type 'carry_follower' to its circuit model 'sky130_fd_sc_hd__mux2_1_wrapper'
Bind pb type 'ff' port 'D' to circuit model 'SDFFRQ' port 'D'
Bind pb type 'ff' port 'DI' to circuit model 'SDFFRQ' port 'DI'
Bind pb type 'ff' port 'reset' to circuit model 'SDFFRQ' port 'reset'
Bind pb type 'ff' port 'Q' to circuit model 'SDFFRQ' port 'Q'
Bind pb type 'ff' port 'clk' to circuit model 'SDFFRQ' port 'clk'
Bind physical pb_type 'ff' to its circuit model 'SDFFRQ'
Implicitly infer a circuit model 'direct_interc' for interconnect 'outpad' under physical mode 'physical' of pb_type 'io'
Implicitly infer a circuit model 'direct_interc' for interconnect 'inpad' under physical mode 'physical' of pb_type 'io'
Implicitly infer a circuit model 'direct_interc' for interconnect 'clks' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'resets' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle0' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle0i' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle1' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle1i' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle2' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle2i' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle3' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle3i' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle4' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle4i' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle5' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle5i' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle6' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle6i' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle7' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct_fle7i' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'clbouts1' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'clbouts2' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'shift_register_in' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'shift_register_out' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'shift_register_link' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'scan_chain_in' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'scan_chain_out' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'scan_chain_link' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'carry_chain_in' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'carry_chain_out' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'carry_chain_link' under physical mode 'default' of pb_type 'clb'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct1' under physical mode 'physical' of pb_type 'fle'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct2' under physical mode 'physical' of pb_type 'fle'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct3' under physical mode 'physical' of pb_type 'fle'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct4' under physical mode 'physical' of pb_type 'fle'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct5' under physical mode 'physical' of pb_type 'fle'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct6' under physical mode 'physical' of pb_type 'fle'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct7' under physical mode 'physical' of pb_type 'fle'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct8' under physical mode 'physical' of pb_type 'fle'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct9' under physical mode 'physical' of pb_type 'fle'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct10' under physical mode 'physical' of pb_type 'fle'
Implicitly infer a circuit model 'direct_interc' for interconnect 'complete1' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'direct_interc' for interconnect 'complete2' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct1' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct2' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct3' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct4' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct5' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct6' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct7' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'mux_tree' for interconnect 'mux1' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'mux_tree' for interconnect 'mux2' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'mux_tree' for interconnect 'mux3' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'mux_tree' for interconnect 'mux4' under physical mode 'default' of pb_type 'fabric'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct1' under physical mode 'default' of pb_type 'frac_logic'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct2' under physical mode 'default' of pb_type 'frac_logic'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct3' under physical mode 'default' of pb_type 'frac_logic'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct4' under physical mode 'default' of pb_type 'frac_logic'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct5' under physical mode 'default' of pb_type 'frac_logic'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct6' under physical mode 'default' of pb_type 'frac_logic'
Implicitly infer a circuit model 'direct_interc' for interconnect 'direct7' under physical mode 'default' of pb_type 'frac_logic'
Implicitly infer a circuit model 'mux_tree' for interconnect 'mux1' under physical mode 'default' of pb_type 'frac_logic'
Implicitly infer a circuit model 'mux_tree' for interconnect 'mux2' under physical mode 'default' of pb_type 'frac_logic'
Done
Check physical pb_type annotation for circuit model passed.

Building annotation between physical pb_types and mode selection bits...
Bind physical pb_type 'iopad' to mode selection bits '1'
Bind physical pb_type 'inpad' to mode selection bits '1'
Bind physical pb_type 'outpad' to mode selection bits '0'
Bind physical pb_type 'frac_lut4' to mode selection bits '0'
Bind physical pb_type 'lut3' to mode selection bits '1'
Bind physical pb_type 'lut4' to mode selection bits '0'
Done
Check pb_type annotation for mode selection bits passed.
Assigning unique indices for primitive pb_graph nodes...
Done
Binding operating pb_graph nodes/pins to physical pb_graph nodes/pins...
Bind operating pb_graph_node 'io[0][physical]/iopad[0]' to physical pb_graph_node 'io[0][physical]/iopad[0]'
Bind a pb_graph_node 'iopad[0]' pin 'outpad[0]' to a pb_graph_node 'iopad[0]' pin 'outpad[0]'!
Bind a pb_graph_node 'iopad[0]' pin 'inpad[0]' to a pb_graph_node 'iopad[0]' pin 'inpad[0]'!
Bind operating pb_graph_node 'io[0][inpad]/inpad[0]' to physical pb_graph_node 'io[0][physical]/iopad[0]'
Bind a pb_graph_node 'inpad[0]' pin 'inpad[0]' to a pb_graph_node 'iopad[0]' pin 'inpad[0]'!
Bind operating pb_graph_node 'io[0][outpad]/outpad[0]' to physical pb_graph_node 'io[0][physical]/iopad[0]'
Bind a pb_graph_node 'outpad[0]' pin 'outpad[0]' to a pb_graph_node 'iopad[0]' pin 'outpad[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]'
Bind a pb_graph_node 'carry_follower[0]' pin 'a[0]' to a pb_graph_node 'carry_follower[0]' pin 'a[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'b[0]' to a pb_graph_node 'carry_follower[0]' pin 'b[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cin[0]' to a pb_graph_node 'carry_follower[0]' pin 'cin[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cout[0]' to a pb_graph_node 'carry_follower[0]' pin 'cout[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'DI[0]' to a pb_graph_node 'ff[0]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[0]' pin 'reset[0]' to a pb_graph_node 'ff[0]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'DI[0]' to a pb_graph_node 'ff[1]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[1]' pin 'reset[0]' to a pb_graph_node 'ff[1]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][n2_lut3]/lut3inter[0][default]/ble3[0][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][n2_lut3]/lut3inter[0][default]/ble3[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][n2_lut3]/lut3inter[0][default]/ble3[1][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][n2_lut3]/lut3inter[0][default]/ble3[1][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][n1_lut4]/ble4[0][default]/lut4[0][]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'lut4[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][n1_lut4]/ble4[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][shift_register]/shift_reg[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[0][shift_register]/shift_reg[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[0][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]'
Bind a pb_graph_node 'carry_follower[0]' pin 'a[0]' to a pb_graph_node 'carry_follower[0]' pin 'a[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'b[0]' to a pb_graph_node 'carry_follower[0]' pin 'b[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cin[0]' to a pb_graph_node 'carry_follower[0]' pin 'cin[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cout[0]' to a pb_graph_node 'carry_follower[0]' pin 'cout[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'DI[0]' to a pb_graph_node 'ff[0]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[0]' pin 'reset[0]' to a pb_graph_node 'ff[0]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'DI[0]' to a pb_graph_node 'ff[1]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[1]' pin 'reset[0]' to a pb_graph_node 'ff[1]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][n2_lut3]/lut3inter[0][default]/ble3[0][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][n2_lut3]/lut3inter[0][default]/ble3[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][n2_lut3]/lut3inter[0][default]/ble3[1][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][n2_lut3]/lut3inter[0][default]/ble3[1][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][n1_lut4]/ble4[0][default]/lut4[0][]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'lut4[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][n1_lut4]/ble4[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][shift_register]/shift_reg[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[1][shift_register]/shift_reg[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[1][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]'
Bind a pb_graph_node 'carry_follower[0]' pin 'a[0]' to a pb_graph_node 'carry_follower[0]' pin 'a[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'b[0]' to a pb_graph_node 'carry_follower[0]' pin 'b[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cin[0]' to a pb_graph_node 'carry_follower[0]' pin 'cin[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cout[0]' to a pb_graph_node 'carry_follower[0]' pin 'cout[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'DI[0]' to a pb_graph_node 'ff[0]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[0]' pin 'reset[0]' to a pb_graph_node 'ff[0]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'DI[0]' to a pb_graph_node 'ff[1]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[1]' pin 'reset[0]' to a pb_graph_node 'ff[1]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][n2_lut3]/lut3inter[0][default]/ble3[0][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][n2_lut3]/lut3inter[0][default]/ble3[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][n2_lut3]/lut3inter[0][default]/ble3[1][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][n2_lut3]/lut3inter[0][default]/ble3[1][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][n1_lut4]/ble4[0][default]/lut4[0][]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'lut4[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][n1_lut4]/ble4[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][shift_register]/shift_reg[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[2][shift_register]/shift_reg[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[2][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]'
Bind a pb_graph_node 'carry_follower[0]' pin 'a[0]' to a pb_graph_node 'carry_follower[0]' pin 'a[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'b[0]' to a pb_graph_node 'carry_follower[0]' pin 'b[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cin[0]' to a pb_graph_node 'carry_follower[0]' pin 'cin[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cout[0]' to a pb_graph_node 'carry_follower[0]' pin 'cout[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'DI[0]' to a pb_graph_node 'ff[0]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[0]' pin 'reset[0]' to a pb_graph_node 'ff[0]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'DI[0]' to a pb_graph_node 'ff[1]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[1]' pin 'reset[0]' to a pb_graph_node 'ff[1]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][n2_lut3]/lut3inter[0][default]/ble3[0][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][n2_lut3]/lut3inter[0][default]/ble3[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][n2_lut3]/lut3inter[0][default]/ble3[1][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][n2_lut3]/lut3inter[0][default]/ble3[1][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][n1_lut4]/ble4[0][default]/lut4[0][]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'lut4[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][n1_lut4]/ble4[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][shift_register]/shift_reg[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[3][shift_register]/shift_reg[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[3][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]'
Bind a pb_graph_node 'carry_follower[0]' pin 'a[0]' to a pb_graph_node 'carry_follower[0]' pin 'a[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'b[0]' to a pb_graph_node 'carry_follower[0]' pin 'b[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cin[0]' to a pb_graph_node 'carry_follower[0]' pin 'cin[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cout[0]' to a pb_graph_node 'carry_follower[0]' pin 'cout[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'DI[0]' to a pb_graph_node 'ff[0]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[0]' pin 'reset[0]' to a pb_graph_node 'ff[0]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'DI[0]' to a pb_graph_node 'ff[1]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[1]' pin 'reset[0]' to a pb_graph_node 'ff[1]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][n2_lut3]/lut3inter[0][default]/ble3[0][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][n2_lut3]/lut3inter[0][default]/ble3[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][n2_lut3]/lut3inter[0][default]/ble3[1][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][n2_lut3]/lut3inter[0][default]/ble3[1][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][n1_lut4]/ble4[0][default]/lut4[0][]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'lut4[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][n1_lut4]/ble4[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][shift_register]/shift_reg[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[4][shift_register]/shift_reg[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[4][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]'
Bind a pb_graph_node 'carry_follower[0]' pin 'a[0]' to a pb_graph_node 'carry_follower[0]' pin 'a[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'b[0]' to a pb_graph_node 'carry_follower[0]' pin 'b[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cin[0]' to a pb_graph_node 'carry_follower[0]' pin 'cin[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cout[0]' to a pb_graph_node 'carry_follower[0]' pin 'cout[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'DI[0]' to a pb_graph_node 'ff[0]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[0]' pin 'reset[0]' to a pb_graph_node 'ff[0]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'DI[0]' to a pb_graph_node 'ff[1]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[1]' pin 'reset[0]' to a pb_graph_node 'ff[1]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][n2_lut3]/lut3inter[0][default]/ble3[0][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][n2_lut3]/lut3inter[0][default]/ble3[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][n2_lut3]/lut3inter[0][default]/ble3[1][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][n2_lut3]/lut3inter[0][default]/ble3[1][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][n1_lut4]/ble4[0][default]/lut4[0][]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'lut4[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][n1_lut4]/ble4[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][shift_register]/shift_reg[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[5][shift_register]/shift_reg[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[5][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]'
Bind a pb_graph_node 'carry_follower[0]' pin 'a[0]' to a pb_graph_node 'carry_follower[0]' pin 'a[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'b[0]' to a pb_graph_node 'carry_follower[0]' pin 'b[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cin[0]' to a pb_graph_node 'carry_follower[0]' pin 'cin[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cout[0]' to a pb_graph_node 'carry_follower[0]' pin 'cout[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'DI[0]' to a pb_graph_node 'ff[0]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[0]' pin 'reset[0]' to a pb_graph_node 'ff[0]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'DI[0]' to a pb_graph_node 'ff[1]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[1]' pin 'reset[0]' to a pb_graph_node 'ff[1]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][n2_lut3]/lut3inter[0][default]/ble3[0][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][n2_lut3]/lut3inter[0][default]/ble3[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][n2_lut3]/lut3inter[0][default]/ble3[1][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][n2_lut3]/lut3inter[0][default]/ble3[1][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][n1_lut4]/ble4[0][default]/lut4[0][]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'lut4[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][n1_lut4]/ble4[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][shift_register]/shift_reg[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[6][shift_register]/shift_reg[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[6][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut2_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/frac_logic[0][default]/carry_follower[0]'
Bind a pb_graph_node 'carry_follower[0]' pin 'a[0]' to a pb_graph_node 'carry_follower[0]' pin 'a[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'b[0]' to a pb_graph_node 'carry_follower[0]' pin 'b[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cin[0]' to a pb_graph_node 'carry_follower[0]' pin 'cin[0]'!
Bind a pb_graph_node 'carry_follower[0]' pin 'cout[0]' to a pb_graph_node 'carry_follower[0]' pin 'cout[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'DI[0]' to a pb_graph_node 'ff[0]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[0]' pin 'reset[0]' to a pb_graph_node 'ff[0]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'DI[0]' to a pb_graph_node 'ff[1]' pin 'DI[0]'!
Bind a pb_graph_node 'ff[1]' pin 'reset[0]' to a pb_graph_node 'ff[1]' pin 'reset[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][n2_lut3]/lut3inter[0][default]/ble3[0][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][n2_lut3]/lut3inter[0][default]/ble3[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][n2_lut3]/lut3inter[0][default]/ble3[1][default]/lut3[0][]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut3[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut3[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut3[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut3_out[1]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][n2_lut3]/lut3inter[0][default]/ble3[1][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][n1_lut4]/ble4[0][default]/lut4[0][]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/frac_logic[0][default]/frac_lut4[0]'
Bind a pb_graph_node 'lut4[0]' pin 'in[0]' to a pb_graph_node 'frac_lut4[0]' pin 'in[0]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[1]' to a pb_graph_node 'frac_lut4[0]' pin 'in[1]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[2]' to a pb_graph_node 'frac_lut4[0]' pin 'in[2]'!
Bind a pb_graph_node 'lut4[0]' pin 'in[3]' to a pb_graph_node 'frac_lut4[0]' pin 'in[3]'!
Bind a pb_graph_node 'lut4[0]' pin 'out[0]' to a pb_graph_node 'frac_lut4[0]' pin 'lut4_out[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][n1_lut4]/ble4[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][shift_register]/shift_reg[0][default]/ff[0]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/ff[0]'
Bind a pb_graph_node 'ff[0]' pin 'D[0]' to a pb_graph_node 'ff[0]' pin 'D[0]'!
Bind a pb_graph_node 'ff[0]' pin 'Q[0]' to a pb_graph_node 'ff[0]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[0]' pin 'clk[0]' to a pb_graph_node 'ff[0]' pin 'clk[0]'!
Bind operating pb_graph_node 'clb[0][default]/fle[7][shift_register]/shift_reg[0][default]/ff[1]' to physical pb_graph_node 'clb[0][default]/fle[7][physical]/fabric[0][default]/ff[1]'
Bind a pb_graph_node 'ff[1]' pin 'D[0]' to a pb_graph_node 'ff[1]' pin 'D[0]'!
Bind a pb_graph_node 'ff[1]' pin 'Q[0]' to a pb_graph_node 'ff[1]' pin 'Q[0]'!
Bind a pb_graph_node 'ff[1]' pin 'clk[0]' to a pb_graph_node 'ff[1]' pin 'clk[0]'!
Done
Check pb_graph annotation for physical nodes and pins passed.
Binded a routing resource graph switch 'ipin_cblock' to circuit model 'mux_tree_tapbuf'
Binded a routing resource graph switch 'L1_mux' to circuit model 'mux_tree_tapbuf'
Binded a routing resource graph switch 'L2_mux' to circuit model 'mux_tree_tapbuf'
Binded a routing resource graph switch 'L4_mux' to circuit model 'mux_tree_tapbuf'
Binded 4 routing resource graph switches to circuit models
Binded a routing segment 'L1' to circuit model 'chan_segment'
Binded a routing segment 'L2' to circuit model 'chan_segment'
Binded a routing segment 'L4' to circuit model 'chan_segment'
Binded 3 routing segments to circuit models
Binded a direct connection 'carry_chain' to circuit model 'direct_interc'
Binded a direct connection 'shift_register' to circuit model 'direct_interc'
Binded a direct connection 'scan_chain' to circuit model 'direct_interc'
Binded 3 direct connections to circuit models
# Annotating rr_node with routed nets
Done with 132 nodes mapping
# Annotating rr_node with routed nets took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Loaded node-to-net mapping
Annotating previous nodes for rr_node...
Warning 57: Override the previous node 'IPIN:2672 side: (TOP,) (8,3)' by previous node 'IPIN:2671 side: (TOP,) (8,3)' for node 'SINK:2622 (8,3)' with in routing context annotation!
Warning 58: Override the previous node 'IPIN:2680 side: (TOP,) (8,3)' by previous node 'IPIN:2679 side: (TOP,) (8,3)' for node 'SINK:2628 (8,3)' with in routing context annotation!
Warning 59: Override the previous node 'IPIN:2691 side: (RIGHT,) (8,3)' by previous node 'IPIN:2690 side: (RIGHT,) (8,3)' for node 'SINK:2634 (8,3)' with in routing context annotation!
Warning 60: Override the previous node 'IPIN:2686 side: (RIGHT,) (8,3)' by previous node 'IPIN:2687 side: (RIGHT,) (8,3)' for node 'SINK:2631 (8,3)' with in routing context annotation!
Warning 61: Override the previous node 'IPIN:2695 side: (RIGHT,) (8,3)' by previous node 'IPIN:2694 side: (RIGHT,) (8,3)' for node 'SINK:2637 (8,3)' with in routing context annotation!
Warning 62: Override the previous node 'IPIN:2699 side: (RIGHT,) (8,3)' by previous node 'IPIN:2698 side: (RIGHT,) (8,3)' for node 'SINK:2640 (8,3)' with in routing context annotation!
Done with 161 nodes mapping
Built 55564 incoming edges for routing resource graph
# Build General Switch Block(GSB) annotation on top of routing resource graph
Start annotation GSB up to [9][9]
[1%] Backannotated GSB[0][0]
[2%] Backannotated GSB[0][1]
[3%] Backannotated GSB[0][2]
[4%] Backannotated GSB[0][3]
[6%] Backannotated GSB[0][4]
[7%] Backannotated GSB[0][5]
[8%] Backannotated GSB[0][6]
[9%] Backannotated GSB[0][7]
[11%] Backannotated GSB[0][8]
[12%] Backannotated GSB[1][0]
[13%] Backannotated GSB[1][1]
[14%] Backannotated GSB[1][2]
[16%] Backannotated GSB[1][3]
[17%] Backannotated GSB[1][4]
[18%] Backannotated GSB[1][5]
[19%] Backannotated GSB[1][6]
[20%] Backannotated GSB[1][7]
[22%] Backannotated GSB[1][8]
[23%] Backannotated GSB[2][0]
[24%] Backannotated GSB[2][1]
[25%] Backannotated GSB[2][2]
[27%] Backannotated GSB[2][3]
[28%] Backannotated GSB[2][4]
[29%] Backannotated GSB[2][5]
[30%] Backannotated GSB[2][6]
[32%] Backannotated GSB[2][7]
[33%] Backannotated GSB[2][8]
[34%] Backannotated GSB[3][0]
[35%] Backannotated GSB[3][1]
[37%] Backannotated GSB[3][2]
[38%] Backannotated GSB[3][3]
[39%] Backannotated GSB[3][4]
[40%] Backannotated GSB[3][5]
[41%] Backannotated GSB[3][6]
[43%] Backannotated GSB[3][7]
[44%] Backannotated GSB[3][8]
[45%] Backannotated GSB[4][0]
[46%] Backannotated GSB[4][1]
[48%] Backannotated GSB[4][2]
[49%] Backannotated GSB[4][3]
[50%] Backannotated GSB[4][4]
[51%] Backannotated GSB[4][5]
[53%] Backannotated GSB[4][6]
[54%] Backannotated GSB[4][7]
[55%] Backannotated GSB[4][8]
[56%] Backannotated GSB[5][0]
[58%] Backannotated GSB[5][1]
[59%] Backannotated GSB[5][2]
[60%] Backannotated GSB[5][3]
[61%] Backannotated GSB[5][4]
[62%] Backannotated GSB[5][5]
[64%] Backannotated GSB[5][6]
[65%] Backannotated GSB[5][7]
[66%] Backannotated GSB[5][8]
[67%] Backannotated GSB[6][0]
[69%] Backannotated GSB[6][1]
[70%] Backannotated GSB[6][2]
[71%] Backannotated GSB[6][3]
[72%] Backannotated GSB[6][4]
[74%] Backannotated GSB[6][5]
[75%] Backannotated GSB[6][6]
[76%] Backannotated GSB[6][7]
[77%] Backannotated GSB[6][8]
[79%] Backannotated GSB[7][0]
[80%] Backannotated GSB[7][1]
[81%] Backannotated GSB[7][2]
[82%] Backannotated GSB[7][3]
[83%] Backannotated GSB[7][4]
[85%] Backannotated GSB[7][5]
[86%] Backannotated GSB[7][6]
[87%] Backannotated GSB[7][7]
[88%] Backannotated GSB[7][8]
[90%] Backannotated GSB[8][0]
[91%] Backannotated GSB[8][1]
[92%] Backannotated GSB[8][2]
[93%] Backannotated GSB[8][3]
[95%] Backannotated GSB[8][4]
[96%] Backannotated GSB[8][5]
[97%] Backannotated GSB[8][6]
[98%] Backannotated GSB[8][7]
[100%] Backannotated GSB[8][8]
Backannotated 81 General Switch Blocks (GSBs).
# Build General Switch Block(GSB) annotation on top of routing resource graph took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Sort incoming edges for each routing track output node of General Switch Block(GSB)
Start sorting edges for GSBs up to [9][9]
[1%] Sorted incoming edges for each routing track output node of GSB[0][0]
[2%] Sorted incoming edges for each routing track output node of GSB[0][1]
[3%] Sorted incoming edges for each routing track output node of GSB[0][2]
[4%] Sorted incoming edges for each routing track output node of GSB[0][3]
[6%] Sorted incoming edges for each routing track output node of GSB[0][4]
[7%] Sorted incoming edges for each routing track output node of GSB[0][5]
[8%] Sorted incoming edges for each routing track output node of GSB[0][6]
[9%] Sorted incoming edges for each routing track output node of GSB[0][7]
[11%] Sorted incoming edges for each routing track output node of GSB[0][8]
[12%] Sorted incoming edges for each routing track output node of GSB[1][0]
[13%] Sorted incoming edges for each routing track output node of GSB[1][1]
[14%] Sorted incoming edges for each routing track output node of GSB[1][2]
[16%] Sorted incoming edges for each routing track output node of GSB[1][3]
[17%] Sorted incoming edges for each routing track output node of GSB[1][4]
[18%] Sorted incoming edges for each routing track output node of GSB[1][5]
[19%] Sorted incoming edges for each routing track output node of GSB[1][6]
[20%] Sorted incoming edges for each routing track output node of GSB[1][7]
[22%] Sorted incoming edges for each routing track output node of GSB[1][8]
[23%] Sorted incoming edges for each routing track output node of GSB[2][0]
[24%] Sorted incoming edges for each routing track output node of GSB[2][1]
[25%] Sorted incoming edges for each routing track output node of GSB[2][2]
[27%] Sorted incoming edges for each routing track output node of GSB[2][3]
[28%] Sorted incoming edges for each routing track output node of GSB[2][4]
[29%] Sorted incoming edges for each routing track output node of GSB[2][5]
[30%] Sorted incoming edges for each routing track output node of GSB[2][6]
[32%] Sorted incoming edges for each routing track output node of GSB[2][7]
[33%] Sorted incoming edges for each routing track output node of GSB[2][8]
[34%] Sorted incoming edges for each routing track output node of GSB[3][0]
[35%] Sorted incoming edges for each routing track output node of GSB[3][1]
[37%] Sorted incoming edges for each routing track output node of GSB[3][2]
[38%] Sorted incoming edges for each routing track output node of GSB[3][3]
[39%] Sorted incoming edges for each routing track output node of GSB[3][4]
[40%] Sorted incoming edges for each routing track output node of GSB[3][5]
[41%] Sorted incoming edges for each routing track output node of GSB[3][6]
[43%] Sorted incoming edges for each routing track output node of GSB[3][7]
[44%] Sorted incoming edges for each routing track output node of GSB[3][8]
[45%] Sorted incoming edges for each routing track output node of GSB[4][0]
[46%] Sorted incoming edges for each routing track output node of GSB[4][1]
[48%] Sorted incoming edges for each routing track output node of GSB[4][2]
[49%] Sorted incoming edges for each routing track output node of GSB[4][3]
[50%] Sorted incoming edges for each routing track output node of GSB[4][4]
[51%] Sorted incoming edges for each routing track output node of GSB[4][5]
[53%] Sorted incoming edges for each routing track output node of GSB[4][6]
[54%] Sorted incoming edges for each routing track output node of GSB[4][7]
[55%] Sorted incoming edges for each routing track output node of GSB[4][8]
[56%] Sorted incoming edges for each routing track output node of GSB[5][0]
[58%] Sorted incoming edges for each routing track output node of GSB[5][1]
[59%] Sorted incoming edges for each routing track output node of GSB[5][2]
[60%] Sorted incoming edges for each routing track output node of GSB[5][3]
[61%] Sorted incoming edges for each routing track output node of GSB[5][4]
[62%] Sorted incoming edges for each routing track output node of GSB[5][5]
[64%] Sorted incoming edges for each routing track output node of GSB[5][6]
[65%] Sorted incoming edges for each routing track output node of GSB[5][7]
[66%] Sorted incoming edges for each routing track output node of GSB[5][8]
[67%] Sorted incoming edges for each routing track output node of GSB[6][0]
[69%] Sorted incoming edges for each routing track output node of GSB[6][1]
[70%] Sorted incoming edges for each routing track output node of GSB[6][2]
[71%] Sorted incoming edges for each routing track output node of GSB[6][3]
[72%] Sorted incoming edges for each routing track output node of GSB[6][4]
[74%] Sorted incoming edges for each routing track output node of GSB[6][5]
[75%] Sorted incoming edges for each routing track output node of GSB[6][6]
[76%] Sorted incoming edges for each routing track output node of GSB[6][7]
[77%] Sorted incoming edges for each routing track output node of GSB[6][8]
[79%] Sorted incoming edges for each routing track output node of GSB[7][0]
[80%] Sorted incoming edges for each routing track output node of GSB[7][1]
[81%] Sorted incoming edges for each routing track output node of GSB[7][2]
[82%] Sorted incoming edges for each routing track output node of GSB[7][3]
[83%] Sorted incoming edges for each routing track output node of GSB[7][4]
[85%] Sorted incoming edges for each routing track output node of GSB[7][5]
[86%] Sorted incoming edges for each routing track output node of GSB[7][6]
[87%] Sorted incoming edges for each routing track output node of GSB[7][7]
[88%] Sorted incoming edges for each routing track output node of GSB[7][8]
[90%] Sorted incoming edges for each routing track output node of GSB[8][0]
[91%] Sorted incoming edges for each routing track output node of GSB[8][1]
[92%] Sorted incoming edges for each routing track output node of GSB[8][2]
[93%] Sorted incoming edges for each routing track output node of GSB[8][3]
[95%] Sorted incoming edges for each routing track output node of GSB[8][4]
[96%] Sorted incoming edges for each routing track output node of GSB[8][5]
[97%] Sorted incoming edges for each routing track output node of GSB[8][6]
[98%] Sorted incoming edges for each routing track output node of GSB[8][7]
[100%] Sorted incoming edges for each routing track output node of GSB[8][8]
Sorted incoming edges for each routing track output node of 81 General Switch Blocks (GSBs).
# Sort incoming edges for each routing track output node of General Switch Block(GSB) took 0.01 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Sort incoming edges for each input pin node of General Switch Block(GSB)
Start sorting edges for GSBs up to [9][9]
[1%] Sorted incoming edges for each input pin node of GSB[0][0]
[2%] Sorted incoming edges for each input pin node of GSB[0][1]
[3%] Sorted incoming edges for each input pin node of GSB[0][2]
[4%] Sorted incoming edges for each input pin node of GSB[0][3]
[6%] Sorted incoming edges for each input pin node of GSB[0][4]
[7%] Sorted incoming edges for each input pin node of GSB[0][5]
[8%] Sorted incoming edges for each input pin node of GSB[0][6]
[9%] Sorted incoming edges for each input pin node of GSB[0][7]
[11%] Sorted incoming edges for each input pin node of GSB[0][8]
[12%] Sorted incoming edges for each input pin node of GSB[1][0]
[13%] Sorted incoming edges for each input pin node of GSB[1][1]
[14%] Sorted incoming edges for each input pin node of GSB[1][2]
[16%] Sorted incoming edges for each input pin node of GSB[1][3]
[17%] Sorted incoming edges for each input pin node of GSB[1][4]
[18%] Sorted incoming edges for each input pin node of GSB[1][5]
[19%] Sorted incoming edges for each input pin node of GSB[1][6]
[20%] Sorted incoming edges for each input pin node of GSB[1][7]
[22%] Sorted incoming edges for each input pin node of GSB[1][8]
[23%] Sorted incoming edges for each input pin node of GSB[2][0]
[24%] Sorted incoming edges for each input pin node of GSB[2][1]
[25%] Sorted incoming edges for each input pin node of GSB[2][2]
[27%] Sorted incoming edges for each input pin node of GSB[2][3]
[28%] Sorted incoming edges for each input pin node of GSB[2][4]
[29%] Sorted incoming edges for each input pin node of GSB[2][5]
[30%] Sorted incoming edges for each input pin node of GSB[2][6]
[32%] Sorted incoming edges for each input pin node of GSB[2][7]
[33%] Sorted incoming edges for each input pin node of GSB[2][8]
[34%] Sorted incoming edges for each input pin node of GSB[3][0]
[35%] Sorted incoming edges for each input pin node of GSB[3][1]
[37%] Sorted incoming edges for each input pin node of GSB[3][2]
[38%] Sorted incoming edges for each input pin node of GSB[3][3]
[39%] Sorted incoming edges for each input pin node of GSB[3][4]
[40%] Sorted incoming edges for each input pin node of GSB[3][5]
[41%] Sorted incoming edges for each input pin node of GSB[3][6]
[43%] Sorted incoming edges for each input pin node of GSB[3][7]
[44%] Sorted incoming edges for each input pin node of GSB[3][8]
[45%] Sorted incoming edges for each input pin node of GSB[4][0]
[46%] Sorted incoming edges for each input pin node of GSB[4][1]
[48%] Sorted incoming edges for each input pin node of GSB[4][2]
[49%] Sorted incoming edges for each input pin node of GSB[4][3]
[50%] Sorted incoming edges for each input pin node of GSB[4][4]
[51%] Sorted incoming edges for each input pin node of GSB[4][5]
[53%] Sorted incoming edges for each input pin node of GSB[4][6]
[54%] Sorted incoming edges for each input pin node of GSB[4][7]
[55%] Sorted incoming edges for each input pin node of GSB[4][8]
[56%] Sorted incoming edges for each input pin node of GSB[5][0]
[58%] Sorted incoming edges for each input pin node of GSB[5][1]
[59%] Sorted incoming edges for each input pin node of GSB[5][2]
[60%] Sorted incoming edges for each input pin node of GSB[5][3]
[61%] Sorted incoming edges for each input pin node of GSB[5][4]
[62%] Sorted incoming edges for each input pin node of GSB[5][5]
[64%] Sorted incoming edges for each input pin node of GSB[5][6]
[65%] Sorted incoming edges for each input pin node of GSB[5][7]
[66%] Sorted incoming edges for each input pin node of GSB[5][8]
[67%] Sorted incoming edges for each input pin node of GSB[6][0]
[69%] Sorted incoming edges for each input pin node of GSB[6][1]
[70%] Sorted incoming edges for each input pin node of GSB[6][2]
[71%] Sorted incoming edges for each input pin node of GSB[6][3]
[72%] Sorted incoming edges for each input pin node of GSB[6][4]
[74%] Sorted incoming edges for each input pin node of GSB[6][5]
[75%] Sorted incoming edges for each input pin node of GSB[6][6]
[76%] Sorted incoming edges for each input pin node of GSB[6][7]
[77%] Sorted incoming edges for each input pin node of GSB[6][8]
[79%] Sorted incoming edges for each input pin node of GSB[7][0]
[80%] Sorted incoming edges for each input pin node of GSB[7][1]
[81%] Sorted incoming edges for each input pin node of GSB[7][2]
[82%] Sorted incoming edges for each input pin node of GSB[7][3]
[83%] Sorted incoming edges for each input pin node of GSB[7][4]
[85%] Sorted incoming edges for each input pin node of GSB[7][5]
[86%] Sorted incoming edges for each input pin node of GSB[7][6]
[87%] Sorted incoming edges for each input pin node of GSB[7][7]
[88%] Sorted incoming edges for each input pin node of GSB[7][8]
[90%] Sorted incoming edges for each input pin node of GSB[8][0]
[91%] Sorted incoming edges for each input pin node of GSB[8][1]
[92%] Sorted incoming edges for each input pin node of GSB[8][2]
[93%] Sorted incoming edges for each input pin node of GSB[8][3]
[95%] Sorted incoming edges for each input pin node of GSB[8][4]
[96%] Sorted incoming edges for each input pin node of GSB[8][5]
[97%] Sorted incoming edges for each input pin node of GSB[8][6]
[98%] Sorted incoming edges for each input pin node of GSB[8][7]
[100%] Sorted incoming edges for each input pin node of GSB[8][8]
Sorted incoming edges for each input pin node of 81 General Switch Blocks (GSBs).
# Sort incoming edges for each input pin node of General Switch Block(GSB) took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build a library of physical multiplexers
Built a multiplexer library of 13 physical multiplexers.
Maximum multiplexer size is 16.
# Build a library of physical multiplexers took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build the annotation about direct connection between tiles
Built a inner-column/row tile-to-tile direct from clb[1][2].cout[54] at side 'BOTTOM' to clb[1][1].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][3].cout[54] at side 'BOTTOM' to clb[1][2].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][4].cout[54] at side 'BOTTOM' to clb[1][3].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][5].cout[54] at side 'BOTTOM' to clb[1][4].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][6].cout[54] at side 'BOTTOM' to clb[1][5].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][7].cout[54] at side 'BOTTOM' to clb[1][6].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][8].cout[54] at side 'BOTTOM' to clb[1][7].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][2].cout[54] at side 'BOTTOM' to clb[2][1].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][3].cout[54] at side 'BOTTOM' to clb[2][2].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][4].cout[54] at side 'BOTTOM' to clb[2][3].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][5].cout[54] at side 'BOTTOM' to clb[2][4].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][6].cout[54] at side 'BOTTOM' to clb[2][5].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][7].cout[54] at side 'BOTTOM' to clb[2][6].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][8].cout[54] at side 'BOTTOM' to clb[2][7].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][2].cout[54] at side 'BOTTOM' to clb[3][1].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][3].cout[54] at side 'BOTTOM' to clb[3][2].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][4].cout[54] at side 'BOTTOM' to clb[3][3].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][5].cout[54] at side 'BOTTOM' to clb[3][4].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][6].cout[54] at side 'BOTTOM' to clb[3][5].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][7].cout[54] at side 'BOTTOM' to clb[3][6].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][8].cout[54] at side 'BOTTOM' to clb[3][7].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][2].cout[54] at side 'BOTTOM' to clb[4][1].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][3].cout[54] at side 'BOTTOM' to clb[4][2].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][4].cout[54] at side 'BOTTOM' to clb[4][3].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][5].cout[54] at side 'BOTTOM' to clb[4][4].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][6].cout[54] at side 'BOTTOM' to clb[4][5].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][7].cout[54] at side 'BOTTOM' to clb[4][6].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][8].cout[54] at side 'BOTTOM' to clb[4][7].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][2].cout[54] at side 'BOTTOM' to clb[5][1].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][3].cout[54] at side 'BOTTOM' to clb[5][2].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][4].cout[54] at side 'BOTTOM' to clb[5][3].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][5].cout[54] at side 'BOTTOM' to clb[5][4].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][6].cout[54] at side 'BOTTOM' to clb[5][5].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][7].cout[54] at side 'BOTTOM' to clb[5][6].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][8].cout[54] at side 'BOTTOM' to clb[5][7].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][2].cout[54] at side 'BOTTOM' to clb[6][1].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][3].cout[54] at side 'BOTTOM' to clb[6][2].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][4].cout[54] at side 'BOTTOM' to clb[6][3].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][5].cout[54] at side 'BOTTOM' to clb[6][4].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][6].cout[54] at side 'BOTTOM' to clb[6][5].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][7].cout[54] at side 'BOTTOM' to clb[6][6].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][8].cout[54] at side 'BOTTOM' to clb[6][7].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][2].cout[54] at side 'BOTTOM' to clb[7][1].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][3].cout[54] at side 'BOTTOM' to clb[7][2].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][4].cout[54] at side 'BOTTOM' to clb[7][3].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][5].cout[54] at side 'BOTTOM' to clb[7][4].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][6].cout[54] at side 'BOTTOM' to clb[7][5].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][7].cout[54] at side 'BOTTOM' to clb[7][6].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][8].cout[54] at side 'BOTTOM' to clb[7][7].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][2].cout[54] at side 'BOTTOM' to clb[8][1].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][3].cout[54] at side 'BOTTOM' to clb[8][2].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][4].cout[54] at side 'BOTTOM' to clb[8][3].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][5].cout[54] at side 'BOTTOM' to clb[8][4].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][6].cout[54] at side 'BOTTOM' to clb[8][5].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][7].cout[54] at side 'BOTTOM' to clb[8][6].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][8].cout[54] at side 'BOTTOM' to clb[8][7].cin[34] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][2].reg_out[52] at side 'BOTTOM' to clb[1][1].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][3].reg_out[52] at side 'BOTTOM' to clb[1][2].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][4].reg_out[52] at side 'BOTTOM' to clb[1][3].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][5].reg_out[52] at side 'BOTTOM' to clb[1][4].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][6].reg_out[52] at side 'BOTTOM' to clb[1][5].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][7].reg_out[52] at side 'BOTTOM' to clb[1][6].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][8].reg_out[52] at side 'BOTTOM' to clb[1][7].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][2].reg_out[52] at side 'BOTTOM' to clb[2][1].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][3].reg_out[52] at side 'BOTTOM' to clb[2][2].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][4].reg_out[52] at side 'BOTTOM' to clb[2][3].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][5].reg_out[52] at side 'BOTTOM' to clb[2][4].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][6].reg_out[52] at side 'BOTTOM' to clb[2][5].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][7].reg_out[52] at side 'BOTTOM' to clb[2][6].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][8].reg_out[52] at side 'BOTTOM' to clb[2][7].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][2].reg_out[52] at side 'BOTTOM' to clb[3][1].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][3].reg_out[52] at side 'BOTTOM' to clb[3][2].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][4].reg_out[52] at side 'BOTTOM' to clb[3][3].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][5].reg_out[52] at side 'BOTTOM' to clb[3][4].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][6].reg_out[52] at side 'BOTTOM' to clb[3][5].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][7].reg_out[52] at side 'BOTTOM' to clb[3][6].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][8].reg_out[52] at side 'BOTTOM' to clb[3][7].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][2].reg_out[52] at side 'BOTTOM' to clb[4][1].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][3].reg_out[52] at side 'BOTTOM' to clb[4][2].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][4].reg_out[52] at side 'BOTTOM' to clb[4][3].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][5].reg_out[52] at side 'BOTTOM' to clb[4][4].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][6].reg_out[52] at side 'BOTTOM' to clb[4][5].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][7].reg_out[52] at side 'BOTTOM' to clb[4][6].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][8].reg_out[52] at side 'BOTTOM' to clb[4][7].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][2].reg_out[52] at side 'BOTTOM' to clb[5][1].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][3].reg_out[52] at side 'BOTTOM' to clb[5][2].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][4].reg_out[52] at side 'BOTTOM' to clb[5][3].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][5].reg_out[52] at side 'BOTTOM' to clb[5][4].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][6].reg_out[52] at side 'BOTTOM' to clb[5][5].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][7].reg_out[52] at side 'BOTTOM' to clb[5][6].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][8].reg_out[52] at side 'BOTTOM' to clb[5][7].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][2].reg_out[52] at side 'BOTTOM' to clb[6][1].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][3].reg_out[52] at side 'BOTTOM' to clb[6][2].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][4].reg_out[52] at side 'BOTTOM' to clb[6][3].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][5].reg_out[52] at side 'BOTTOM' to clb[6][4].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][6].reg_out[52] at side 'BOTTOM' to clb[6][5].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][7].reg_out[52] at side 'BOTTOM' to clb[6][6].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][8].reg_out[52] at side 'BOTTOM' to clb[6][7].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][2].reg_out[52] at side 'BOTTOM' to clb[7][1].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][3].reg_out[52] at side 'BOTTOM' to clb[7][2].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][4].reg_out[52] at side 'BOTTOM' to clb[7][3].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][5].reg_out[52] at side 'BOTTOM' to clb[7][4].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][6].reg_out[52] at side 'BOTTOM' to clb[7][5].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][7].reg_out[52] at side 'BOTTOM' to clb[7][6].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][8].reg_out[52] at side 'BOTTOM' to clb[7][7].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][2].reg_out[52] at side 'BOTTOM' to clb[8][1].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][3].reg_out[52] at side 'BOTTOM' to clb[8][2].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][4].reg_out[52] at side 'BOTTOM' to clb[8][3].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][5].reg_out[52] at side 'BOTTOM' to clb[8][4].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][6].reg_out[52] at side 'BOTTOM' to clb[8][5].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][7].reg_out[52] at side 'BOTTOM' to clb[8][6].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][8].reg_out[52] at side 'BOTTOM' to clb[8][7].reg_in[32] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][2].sc_out[53] at side 'BOTTOM' to clb[1][1].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][3].sc_out[53] at side 'BOTTOM' to clb[1][2].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][4].sc_out[53] at side 'BOTTOM' to clb[1][3].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][5].sc_out[53] at side 'BOTTOM' to clb[1][4].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][6].sc_out[53] at side 'BOTTOM' to clb[1][5].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][7].sc_out[53] at side 'BOTTOM' to clb[1][6].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[1][8].sc_out[53] at side 'BOTTOM' to clb[1][7].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][2].sc_out[53] at side 'BOTTOM' to clb[2][1].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][3].sc_out[53] at side 'BOTTOM' to clb[2][2].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][4].sc_out[53] at side 'BOTTOM' to clb[2][3].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][5].sc_out[53] at side 'BOTTOM' to clb[2][4].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][6].sc_out[53] at side 'BOTTOM' to clb[2][5].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][7].sc_out[53] at side 'BOTTOM' to clb[2][6].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[2][8].sc_out[53] at side 'BOTTOM' to clb[2][7].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][2].sc_out[53] at side 'BOTTOM' to clb[3][1].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][3].sc_out[53] at side 'BOTTOM' to clb[3][2].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][4].sc_out[53] at side 'BOTTOM' to clb[3][3].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][5].sc_out[53] at side 'BOTTOM' to clb[3][4].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][6].sc_out[53] at side 'BOTTOM' to clb[3][5].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][7].sc_out[53] at side 'BOTTOM' to clb[3][6].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[3][8].sc_out[53] at side 'BOTTOM' to clb[3][7].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][2].sc_out[53] at side 'BOTTOM' to clb[4][1].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][3].sc_out[53] at side 'BOTTOM' to clb[4][2].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][4].sc_out[53] at side 'BOTTOM' to clb[4][3].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][5].sc_out[53] at side 'BOTTOM' to clb[4][4].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][6].sc_out[53] at side 'BOTTOM' to clb[4][5].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][7].sc_out[53] at side 'BOTTOM' to clb[4][6].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[4][8].sc_out[53] at side 'BOTTOM' to clb[4][7].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][2].sc_out[53] at side 'BOTTOM' to clb[5][1].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][3].sc_out[53] at side 'BOTTOM' to clb[5][2].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][4].sc_out[53] at side 'BOTTOM' to clb[5][3].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][5].sc_out[53] at side 'BOTTOM' to clb[5][4].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][6].sc_out[53] at side 'BOTTOM' to clb[5][5].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][7].sc_out[53] at side 'BOTTOM' to clb[5][6].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[5][8].sc_out[53] at side 'BOTTOM' to clb[5][7].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][2].sc_out[53] at side 'BOTTOM' to clb[6][1].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][3].sc_out[53] at side 'BOTTOM' to clb[6][2].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][4].sc_out[53] at side 'BOTTOM' to clb[6][3].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][5].sc_out[53] at side 'BOTTOM' to clb[6][4].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][6].sc_out[53] at side 'BOTTOM' to clb[6][5].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][7].sc_out[53] at side 'BOTTOM' to clb[6][6].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[6][8].sc_out[53] at side 'BOTTOM' to clb[6][7].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][2].sc_out[53] at side 'BOTTOM' to clb[7][1].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][3].sc_out[53] at side 'BOTTOM' to clb[7][2].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][4].sc_out[53] at side 'BOTTOM' to clb[7][3].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][5].sc_out[53] at side 'BOTTOM' to clb[7][4].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][6].sc_out[53] at side 'BOTTOM' to clb[7][5].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][7].sc_out[53] at side 'BOTTOM' to clb[7][6].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[7][8].sc_out[53] at side 'BOTTOM' to clb[7][7].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][2].sc_out[53] at side 'BOTTOM' to clb[8][1].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][3].sc_out[53] at side 'BOTTOM' to clb[8][2].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][4].sc_out[53] at side 'BOTTOM' to clb[8][3].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][5].sc_out[53] at side 'BOTTOM' to clb[8][4].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][6].sc_out[53] at side 'BOTTOM' to clb[8][5].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][7].sc_out[53] at side 'BOTTOM' to clb[8][6].sc_in[33] at side 'TOP'
Built a inner-column/row tile-to-tile direct from clb[8][8].sc_out[53] at side 'BOTTOM' to clb[8][7].sc_in[33] at side 'TOP'
Built a inter-column/row tile-to-tile direct from clb[1][1].sc_out[53] at side 'BOTTOM' to clb[2][8].sc_in[33] at side 'TOP'
Built a inter-column/row tile-to-tile direct from clb[2][1].sc_out[53] at side 'BOTTOM' to clb[3][8].sc_in[33] at side 'TOP'
Built a inter-column/row tile-to-tile direct from clb[3][1].sc_out[53] at side 'BOTTOM' to clb[4][8].sc_in[33] at side 'TOP'
Built a inter-column/row tile-to-tile direct from clb[4][1].sc_out[53] at side 'BOTTOM' to clb[5][8].sc_in[33] at side 'TOP'
Built a inter-column/row tile-to-tile direct from clb[5][1].sc_out[53] at side 'BOTTOM' to clb[6][8].sc_in[33] at side 'TOP'
Built a inter-column/row tile-to-tile direct from clb[6][1].sc_out[53] at side 'BOTTOM' to clb[7][8].sc_in[33] at side 'TOP'
Built a inter-column/row tile-to-tile direct from clb[7][1].sc_out[53] at side 'BOTTOM' to clb[8][8].sc_in[33] at side 'TOP'
Built 175 tile-to-tile direct connections
# Build the annotation about direct connection between tiles took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Building annotation for post-routing and clustering synchornization results...Done
Building annotation for mapped blocks on grid locations...Done
User specified the operating clock frequency to use VPR results
Use VPR critical path delay 2.9856e-17 [ns] with a 20 [%] slack in OpenFPGA.
Incr Slack updates 1 in 1.27e-06 sec
Full Max Req/Worst Slack updates 1 in 7.7e-07 sec
Incr Max Req/Worst Slack updates 0 in 0 sec
Incr Criticality updates 0 in 0 sec
Full Criticality updates 1 in 1.18e-06 sec
Will apply operating clock frequency 33.4941 [MHz] to simulations
User specified the number of operating clock cycles to be inferred from signal activities
Average net density: 0.15
Median net density: 0.00
Average net density after weighting: 0.16
Will apply 7 operating clock cycles to simulations
Link OpenFPGA architecture to VPR architecture took 0.02 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: check_netlist_naming_conflict --fix --report ./netlist_renaming.xml

Confirm selected options when call command 'check_netlist_naming_conflict':
--fix: on
--report: ./netlist_renaming.xml
Check naming violations of netlist blocks and nets
Fixed 38 naming conflicts in the netlist.
Naming fix-up report is generated to file './netlist_renaming.xml'
Check naming violations of netlist blocks and nets took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: pb_pin_fixup --verbose

Confirm selected options when call command 'pb_pin_fixup':
--verbose: on
Fix up pb pin mapping results after routing optimization
Fixed up net 'unmapped' mapping mismatch at clustered block 'n30' pin 'grid[8][3].clb.I0[0]' (was net 'bm[0]')
Fixed up net 'bm[0]' mapping mismatch at clustered block 'n30' pin 'grid[8][3].clb.I0[1]' (was net 'unmapped')
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I0i[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I0i[1]' as it matches cluster routing
Fixed up net '$abc$138$new_n33_' mapping mismatch at clustered block 'n30' pin 'grid[8][3].clb.I1[0]' (was net 'reset')
Fixed up net 'reset' mapping mismatch at clustered block 'n30' pin 'grid[8][3].clb.I1[1]' (was net '$abc$138$new_n33_')
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I1i[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I1i[1]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I2[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I2[1]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I2i[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I2i[1]' as it matches cluster routing
Fixed up net 'mq[1]' mapping mismatch at clustered block 'n30' pin 'grid[8][3].clb.I3[0]' (was net '$abc$138$new_n31_')
Fixed up net '$abc$138$new_n31_' mapping mismatch at clustered block 'n30' pin 'grid[8][3].clb.I3[1]' (was net 'mq[1]')
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I3i[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I3i[1]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I4[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I4[1]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I4i[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I4i[1]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I5[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I5[1]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I5i[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I5i[1]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I6[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I6[1]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I6i[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I6i[1]' as it matches cluster routing
Fixed up net 'mq[0]' mapping mismatch at clustered block 'n30' pin 'grid[8][3].clb.I7[0]' (was net '$abc$138$new_n27_')
Fixed up net '$abc$138$new_n27_' mapping mismatch at clustered block 'n30' pin 'grid[8][3].clb.I7[1]' (was net 'mq[0]')
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I7i[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.I7i[1]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.reg_in[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.sc_in[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.cin[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.reset[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[1]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[2]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[3]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[4]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[5]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[6]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[7]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[8]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[9]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[10]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[11]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[12]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[13]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[14]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.O[15]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.reg_out[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.sc_out[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.cout[0]' as it matches cluster routing
Bypass net at clustered block 'n30' pin 'grid[8][3].clb.clk[0]' as it is not routed
Bypass net at clustered block 'am[1]' pin 'grid[9][4].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'am[1]' pin 'grid[9][4].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'am[0]' pin 'grid[9][4].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'am[0]' pin 'grid[9][4].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'bm[1]' pin 'grid[9][4].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'bm[1]' pin 'grid[9][4].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'bm[0]' pin 'grid[9][4].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'bm[0]' pin 'grid[9][4].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'ma[1]' pin 'grid[9][3].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'ma[1]' pin 'grid[9][3].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'ma[0]' pin 'grid[9][3].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'ma[0]' pin 'grid[9][3].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'mb[1]' pin 'grid[9][3].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'mb[1]' pin 'grid[9][3].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'mb[0]' pin 'grid[9][3].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'mb[0]' pin 'grid[9][3].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'mq[1]' pin 'grid[9][2].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'mq[1]' pin 'grid[9][2].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'mq[0]' pin 'grid[9][2].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'mq[0]' pin 'grid[9][2].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'out:qm[1]' pin 'grid[9][2].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'out:qm[1]' pin 'grid[9][2].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'out:qm[0]' pin 'grid[9][2].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'out:qm[0]' pin 'grid[9][2].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'reset' pin 'grid[9][1].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'reset' pin 'grid[9][1].io.inpad[0]' as it matches cluster routing
Bypass net at clustered block 'clock' pin 'grid[9][1].io.outpad[0]' as it matches cluster routing
Bypass net at clustered block 'clock' pin 'grid[9][1].io.inpad[0]' as it is not routed
Fix up pb pin mapping results after routing optimization took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: lut_truth_table_fixup

Confirm selected options when call command 'lut_truth_table_fixup':
--verbose: off
Fix up LUT truth tables after packing optimization
Fix up LUT truth tables after packing optimization took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: build_fabric --compress_routing

Confirm selected options when call command 'build_fabric':
--frame_view: off
--compress_routing: on
--duplicate_grid_pin: off
--load_fabric_key: off
--write_fabric_key: off
--generate_random_fabric_key: off
--verbose: off
Identify unique General Switch Blocks (GSBs)
Detected 9 unique general switch blocks from a total of 81 (compression rate=800.00%)
Identify unique General Switch Blocks (GSBs) took 0.02 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)


Build fabric module graph
# Build constant generator modules
# Build constant generator modules took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build user-defined modules
# Build user-defined modules took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build essential (inverter/buffer/logic gate) modules
# Build essential (inverter/buffer/logic gate) modules took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build local encoder (for multiplexers) modules
# Build local encoder (for multiplexers) modules took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Building multiplexer modules
# Building multiplexer modules took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build Look-Up Table (LUT) modules
# Build Look-Up Table (LUT) modules took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build wire modules
# Build wire modules took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build memory modules
# Build memory modules took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build grid modules
Building logical tiles...Done
Building physical tiles...Done
# Build grid modules took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build unique routing modules...
# Build unique routing modules... took 0.01 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build FPGA fabric module
## Add grid instances to top module
## Add grid instances to top module took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
## Add switch block instances to top module
## Add switch block instances to top module took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
## Add connection block instances to top module
## Add connection block instances to top module took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
## Add connection block instances to top module
## Add connection block instances to top module took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
## Add module nets between grids and GSBs
## Add module nets between grids and GSBs took 0.02 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
## Add module nets for inter-tile connections
## Add module nets for inter-tile connections took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
## Build configurable regions for the top module
## Build configurable regions for the top module took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
## Add module nets for configuration buses
## Add module nets for configuration buses took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
# Build FPGA fabric module took 0.03 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Build fabric module graph took 0.03 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Create I/O location mapping for top module
Create I/O location mapping for top module took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Create global port info for top module
Create global port info for top module took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: write_io_mapping --file benchmark_io_mapping.xml --verbose --no_time_stamp

Confirm selected options when call command 'write_io_mapping':
--file, -f: benchmark_io_mapping.xml
--no_time_stamp: on
--verbose: on
Warning 63: Directory path is empty and nothing will be created.
Write I/O mapping into xml file 'benchmark_io_mapping.xml'
Outputted 14 I/O mapping to file 'benchmark_io_mapping.xml'
Write I/O mapping into xml file 'benchmark_io_mapping.xml' took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: write_fabric_hierarchy --file ./fabric_hierarchy.txt

Confirm selected options when call command 'write_fabric_hierarchy':
--file, -f: ./fabric_hierarchy.txt
--depth: off
--verbose: off
Warning 64: Directory '.' already exists. Will overwrite contents
Write fabric hierarchy to plain-text file './fabric_hierarchy.txt'
Write fabric hierarchy to plain-text file './fabric_hierarchy.txt' took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: repack

Confirm selected options when call command 'repack':
--design_constraints: off
--ignore_global_nets_on_pins: off
--verbose: off
Build routing resource graph for the physical implementation of logical tile
Build routing resource graph for the physical implementation of logical tile took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Repack clustered blocks to physical implementation of logical tile
Repack clustered block 'n30'...Done
Repack clustered block 'out:qm[0]'...Done
Repack clustered block 'out:qm[1]'...Done
Repack clustered block 'am[0]'...Done
Repack clustered block 'am[1]'...Done
Repack clustered block 'bm[0]'...Done
Repack clustered block 'bm[1]'...Done
Repack clustered block 'ma[0]'...Done
Repack clustered block 'ma[1]'...Done
Repack clustered block 'mb[0]'...Done
Repack clustered block 'mb[1]'...Done
Repack clustered block 'mq[0]'...Done
Repack clustered block 'mq[1]'...Done
Repack clustered block 'reset'...Done
Repack clustered block 'clock'...Done
Repack clustered blocks to physical implementation of logical tile took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Identify wire LUTs created by repacking
Identified 0 wire LUTs created by repacker
Identify wire LUTs created by repacking took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Build truth tables for physical LUTs
Build truth tables for physical LUTs took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: build_architecture_bitstream --verbose --write_file fabric_independent_bitstream.xml

Confirm selected options when call command 'build_architecture_bitstream':
--write_file: fabric_independent_bitstream.xml
--read_file: off
--no_time_stamp: off
--verbose: on

Build fabric-independent bitstream for implementation 'maskmul'

Reserved 12283 configurable blocks
Reserved 35888 configuration bits
Building grid bitstream...
Generating bitstream for core grids...Done
Generating bitstream for I/O grids...Done
Done
Building routing bitstream...
Generating bitstream for Switch blocks...Done
Generating bitstream for X-direction Connection blocks ...Done
Generating bitstream for Y-direction Connection blocks ...Done
Done
Decoded 35888 configuration bits into 12283 blocks

Build fabric-independent bitstream for implementation 'maskmul'
 took 0.02 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Warning 65: Directory path is empty and nothing will be created.
Write 35888 architecture independent bitstream into XML file 'fabric_independent_bitstream.xml'
Write 35888 architecture independent bitstream into XML file 'fabric_independent_bitstream.xml' took 0.18 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: build_fabric_bitstream --verbose

Confirm selected options when call command 'build_fabric_bitstream':
--verbose: on

Build fabric dependent bitstream

Built 35888 configuration bits for fabric

Build fabric dependent bitstream
 took 0.01 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: write_fabric_bitstream --file fabric_bitstream.bit --format plain_text

Confirm selected options when call command 'write_fabric_bitstream':
--file, -f: fabric_bitstream.bit
--format: plain_text
--fast_configuration: off
--keep_dont_care_bits: off
--no_time_stamp: off
--verbose: off
Warning 66: Directory path is empty and nothing will be created.
Write 35888 fabric bitstream into plain text file 'fabric_bitstream.bit'
Write 35888 fabric bitstream into plain text file 'fabric_bitstream.bit' took 0.04 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: write_fabric_verilog --default_net_type wire --file ./SRC --explicit_port_mapping --include_timing --print_user_defined_template --verbose

Confirm selected options when call command 'write_fabric_verilog':
--file, -f: ./SRC
--explicit_port_mapping: on
--include_timing: on
--print_user_defined_template: on
--default_net_type: wire
--no_time_stamp: off
--use_relative_path: off
--verbose: on
Write Verilog netlists for FPGA fabric

Succeed to create directory './SRC'
Succeed to create directory './SRC/sub_module'
Succeed to create directory './SRC/lb'
Succeed to create directory './SRC/routing'
Generating Verilog netlist './SRC/sub_module/inv_buf_passgate.v' for essential gates...Done
Writing Verilog netlist for configuration decoders './SRC/sub_module/arch_encoder.v'...Done
Writing Verilog netlist for local decoders for multiplexers './SRC/sub_module/local_encoder.v'...Done
Writing Verilog netlist for Multiplexer primitives './SRC/sub_module/mux_primitives.v' ...Done
Writing Verilog netlist for Multiplexers './SRC/sub_module/muxes.v' ...Done
Writing Verilog netlist for LUTs './SRC/sub_module/luts.v'...Done
Writing Verilog netlist for wires './SRC/sub_module/wires.v'...Done
Writing Verilog netlist for memories './SRC/sub_module/memories.v' ...Done
Writing Verilog netlist for shift register banks './SRC/sub_module/shift_register_banks.v' ...Done
Creating template for user-defined Verilog modules './SRC/sub_module/user_defined_templates.v'...Done

Writing logical tiles...
Writing Verilog netlists for logic tile 'io' ...
Writing Verilog netlist './SRC/lb/logical_tile_io_mode_physical__iopad.v' for primitive pb_type 'iopad' ...
Writing Verilog codes of logical tile primitive block 'logical_tile_io_mode_physical__iopad'...Done
Writing Verilog netlist './SRC/lb/logical_tile_io_mode_io_.v' for pb_type 'io' ...
Writing Verilog codes of pb_type 'logical_tile_io_mode_io_'...Done
Done

Writing Verilog netlists for logic tile 'clb' ...
Writing Verilog netlist './SRC/lb/logical_tile_clb_mode_default__fle_mode_physical__fabric_mode_default__frac_logic_mode_default__frac_lut4.v' for primitive pb_type 'frac_lut4' ...
Writing Verilog codes of logical tile primitive block 'logical_tile_clb_mode_default__fle_mode_physical__fabric_mode_default__frac_logic_mode_default__frac_lut4'...Done
Writing Verilog netlist './SRC/lb/logical_tile_clb_mode_default__fle_mode_physical__fabric_mode_default__frac_logic_mode_default__carry_follower.v' for primitive pb_type 'carry_follower' ...
Writing Verilog codes of logical tile primitive block 'logical_tile_clb_mode_default__fle_mode_physical__fabric_mode_default__frac_logic_mode_default__carry_follower'...Done
Writing Verilog netlist './SRC/lb/logical_tile_clb_mode_default__fle_mode_physical__fabric_mode_default__frac_logic.v' for pb_type 'frac_logic' ...
Writing Verilog codes of pb_type 'logical_tile_clb_mode_default__fle_mode_physical__fabric_mode_default__frac_logic'...Done
Writing Verilog netlist './SRC/lb/logical_tile_clb_mode_default__fle_mode_physical__fabric_mode_default__ff.v' for primitive pb_type 'ff' ...
Writing Verilog codes of logical tile primitive block 'logical_tile_clb_mode_default__fle_mode_physical__fabric_mode_default__ff'...Done
Writing Verilog netlist './SRC/lb/logical_tile_clb_mode_default__fle_mode_physical__fabric.v' for pb_type 'fabric' ...
Writing Verilog codes of pb_type 'logical_tile_clb_mode_default__fle_mode_physical__fabric'...Done
Writing Verilog netlist './SRC/lb/logical_tile_clb_mode_default__fle.v' for pb_type 'fle' ...
Writing Verilog codes of pb_type 'logical_tile_clb_mode_default__fle'...Done
Writing Verilog netlist './SRC/lb/logical_tile_clb_mode_clb_.v' for pb_type 'clb' ...
Writing Verilog codes of pb_type 'logical_tile_clb_mode_clb_'...Done
Done

Writing logical tiles...Done

Building physical tiles...
Writing Verilog Netlist './SRC/lb/grid_io_top_top.v' for physical tile 'io_top' at top side ...Done
Writing Verilog Netlist './SRC/lb/grid_io_right_right.v' for physical tile 'io_right' at right side ...Done
Writing Verilog Netlist './SRC/lb/grid_io_bottom_bottom.v' for physical tile 'io_bottom' at bottom side ...Done
Writing Verilog Netlist './SRC/lb/grid_io_left_left.v' for physical tile 'io_left' at left side ...Done
Writing Verilog Netlist './SRC/lb/grid_clb.v' for physical_tile 'clb'...Done
Building physical tiles...Done

Writing Verilog netlist for top-level module of FPGA fabric './SRC/fpga_top.v'...Done
Written 71 Verilog modules in total
Write Verilog netlists for FPGA fabric
 took 0.07 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: write_full_testbench --default_net_type wire --file ./SRC --explicit_port_mapping --include_signal_init --pin_constraints_file /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/config/pin_constraints.xml --bitstream fabric_bitstream.bit

Confirm selected options when call command 'write_full_testbench':
--file, -f: ./SRC
--bitstream: fabric_bitstream.bit
--fabric_netlist_file_path: off
--pin_constraints_file, -pcf: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/config/pin_constraints.xml
--bus_group_file, -bgf: off
--reference_benchmark_file_path: off
--fast_configuration: off
--explicit_port_mapping: on
--default_net_type: wire
--no_self_checking: off
--include_signal_init: on
--no_time_stamp: off
--use_relative_path: off
--verbose: off
Read Pin Constraints
Read Pin Constraints took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write Verilog full testbenches for FPGA fabric

Warning 67: Directory './SRC' already exists. Will overwrite contents
# Write autocheck testbench for FPGA top-level Verilog netlist for 'maskmul'
Will use 35889 configuration clock cycles to top testbench
# Write autocheck testbench for FPGA top-level Verilog netlist for 'maskmul' took 0.46 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write Verilog full testbenches for FPGA fabric
 took 0.46 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: write_preconfigured_fabric_wrapper --default_net_type wire --embed_bitstream modelsim --file ./SRC --pin_constraints_file /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/config/pin_constraints.xml

Confirm selected options when call command 'write_preconfigured_fabric_wrapper':
--file, -f: ./SRC
--fabric_netlist_file_path: off
--pin_constraints_file, -pcf: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/config/pin_constraints.xml
--bus_group_file, -bgf: off
--explicit_port_mapping: off
--default_net_type: wire
--embed_bitstream: modelsim
--include_signal_init: off
--no_time_stamp: off
--verbose: off
Read Pin Constraints
Read Pin Constraints took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write a wrapper module for a preconfigured FPGA fabric

Warning 68: Directory './SRC' already exists. Will overwrite contents
# Write pre-configured FPGA top-level Verilog netlist for design 'maskmul'
# Write pre-configured FPGA top-level Verilog netlist for design 'maskmul' took 0.02 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write a wrapper module for a preconfigured FPGA fabric
 took 0.02 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: write_preconfigured_testbench --default_net_type wire --file ./SRC --pin_constraints_file /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/config/pin_constraints.xml

Confirm selected options when call command 'write_preconfigured_testbench':
--file, -f: ./SRC
--fabric_netlist_file_path: off
--pin_constraints_file, -pcf: /home/everton/OpenFPGA_bitstream_generation/openfpga_flow/tasks/SOFA_tasks/config/pin_constraints.xml
--bus_group_file, -bgf: off
--reference_benchmark_file_path: off
--explicit_port_mapping: off
--default_net_type: wire
--no_time_stamp: off
--use_relative_path: off
--verbose: off
Read Pin Constraints
Read Pin Constraints took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write Verilog testbenches for a preconfigured FPGA fabric

Warning 69: Directory './SRC' already exists. Will overwrite contents
# Write configuration-skip testbench for FPGA top-level Verilog netlist implemented by 'maskmul'
# Write configuration-skip testbench for FPGA top-level Verilog netlist implemented by 'maskmul' took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write Verilog testbenches for a preconfigured FPGA fabric
 took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: write_pnr_sdc --file ./SDC --flatten_names --time_unit ps

Confirm selected options when call command 'write_pnr_sdc':
--file, -f: ./SDC
--flatten_names: on
--hierarchical: off
--output_hierarchy: off
--time_unit: ps
--constrain_global_port: off
--constrain_non_clock_global_port: off
--constrain_grid: off
--constrain_sb: off
--constrain_cb: off
--constrain_configurable_memory_outputs: off
--constrain_routing_multiplexer_outputs: off
--constrain_switch_block_outputs: off
--constrain_zero_delay_paths: off
--no_time_stamp: off
--verbose: off
Succeed to create directory './SDC'
Write SDC for constraining clocks for P&R flow './SDC/global_ports.sdc'
Write SDC for constraining clocks for P&R flow './SDC/global_ports.sdc' took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write SDC to disable configurable memory outputs for P&R flow './SDC/disable_configurable_memory_outputs.sdc'
Write SDC to disable configurable memory outputs for P&R flow './SDC/disable_configurable_memory_outputs.sdc' took 0.06 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write SDC to disable routing multiplexer outputs for P&R flow './SDC/disable_routing_multiplexer_outputs.sdc'
Write SDC to disable routing multiplexer outputs for P&R flow './SDC/disable_routing_multiplexer_outputs.sdc' took 0.32 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write SDC to disable switch block outputs for P&R flow './SDC/disable_sb_outputs.sdc'
Write SDC to disable switch block outputs for P&R flow './SDC/disable_sb_outputs.sdc' took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write SDC for constrain Switch Block timing for P&R flow
Write SDC for constrain Switch Block timing for P&R flow took 0.01 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write SDC for constrain Connection Block timing for P&R flow
Write SDC for constrain Connection Block timing for P&R flow took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)
Write SDC for constraining grid timing for P&R flow
Write SDC for constraining grid timing for P&R flow took 0.00 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: write_sdc_disable_timing_configure_ports --flatten_names --file ./SDC/disable_configure_ports.sdc

Confirm selected options when call command 'write_sdc_disable_timing_configure_ports':
--file, -f: ./SDC/disable_configure_ports.sdc
--flatten_names: on
--no_time_stamp: off
--verbose: off
Warning 70: Directory './SDC' already exists. Will overwrite contents
Write SDC to disable timing on configuration outputs of programmable cells for P&R flow './SDC/disable_configure_ports.sdc'
Write SDC to disable timing on configuration outputs of programmable cells for P&R flow './SDC/disable_configure_ports.sdc' took 0.75 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: write_analysis_sdc --file ./SDC_analysis --flatten_names --time_unit ns

Confirm selected options when call command 'write_analysis_sdc':
--file, -f: ./SDC_analysis
--verbose: off
--flatten_names: on
--time_unit: ns
--no_time_stamp: off
Succeed to create directory './SDC_analysis'
Generating SDC for Timing/Power analysis on the mapped FPGA './SDC_analysis/maskmul_fpga_top_analysis.sdc'
Generating SDC for Timing/Power analysis on the mapped FPGA './SDC_analysis/maskmul_fpga_top_analysis.sdc' took 0.27 seconds (max_rss 49.8 MiB, delta_rss +0.0 MiB)

Command line to execute: exit

Confirm selected options when call command 'exit':

Finish execution with 0 errors

The entire OpenFPGA flow took 2.47736 seconds

Thank you for using OpenFPGA!
0